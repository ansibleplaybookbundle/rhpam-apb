schema_version: 1

name: "rhpam-7/rhpam-apb"
description: "Red Hat Business Central 7.4 OpenShift Ansible Playbook Bundle"
version: "1.2"
from: "openshift3/apb-base:v3.11"
labels:
  - name: "com.redhat.component"
    value: "rhpam-apb"
  - name: "io.k8s.description"
    value: "Platform for running Red Hat Process Automation Manager"
  - name: "io.k8s.display-name"
    value: "Red Hat Process Automation Manager 7.4"
  - name: "io.openshift.tags"
    value: "javaee,eap,eap7,rhpam,rhpam7,apb"
  - name: "com.redhat.apb.spec"
    value: "LS0tCiMgQ29tbW9uIENyZWRlbnRpYWxzCl9hcGJfa2llX2FkbWluX3VzZXI6ICZfYXBiX2tpZV9hZG1pbl91c2VyCiAgbmFtZTogYXBiX2tpZV9hZG1pbl91c2VyCiAgdGl0bGU6IEFkbWluIFVzZXJuYW1lCiAgZGVzY3JpcHRpb246IEFkbWluIHVzZXIgbmFtZSBmb3IgQnVzaW5lc3MgQ2VudHJhbCBhbmQgUHJvY2VzcyBTZXJ2ZXIKICByZXF1aXJlZDogdHJ1ZQogIHR5cGU6IHN0cmluZwogIGRlZmF1bHQ6IGFkbWluVXNlcgpfYXBiX2tpZV9hZG1pbl9wd2Q6ICZfYXBiX2tpZV9hZG1pbl9wd2QKICBuYW1lOiBhcGJfa2llX2FkbWluX3B3ZAogIHRpdGxlOiBBZG1pbiBQYXNzd29yZAogIGRlc2NyaXB0aW9uOiBBZG1pbiB1c2VyIHBhc3N3b3JkIGZvciBCdXNpbmVzcyBDZW50\
cmFsIGFuZCBQcm9jZXNzIFNlcnZlci4gR2VuZXJhdGVkIGlmIGVtcHR5CiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV90eXBlOiBwYXNzd29yZAojIEltYWdlU3RyZWFtcwpfYXBiX2ltYWdlX3N0cmVhbV90YWc6ICZfYXBiX2ltYWdlX3N0cmVhbV90YWcKICBuYW1lOiBhcGJfaW1hZ2Vfc3RyZWFtX3RhZwogIHRpdGxlOiBJbWFnZSB2ZXJzaW9uCiAgZGVzY3JpcHRpb246IFRhZyB2ZXJzaW9uIG9mIHRoZSBSSFBBTSBJbWFnZVN0cmVhbSB0byB1c2UuIEl0IG11c3QgZXhpc3QgaW4gdGhlIG9wZW5zaGlmdCBuYW1lc3BhY2UuCiAgcmVxdWlyZWQ6IHRydWUKICB0eXBlOiBzdHJpbmcKICBkZWZhdWx0OiAnMS4xJwojIEhBCl9hcGJfcmVwbGljYXM6ICZfYXBiX3JlcGxpY2FzCiAg\
dGl0bGU6IE51bWJlciBvZiByZXBsaWNhcwogIGRlc2NyaXB0aW9uOiBOdW1iZXIgb2YgUmVwbGljYXMgdGhhdCB3aWxsIGJlIGluaXRpYWxseSBkZXBsb3llZAogIHJlcXVpcmVkOiB0cnVlCiAgdHlwZTogbnVtYmVyCiAgZGVmYXVsdDogMwojIE1hdmVuCl9hcGJfbWF2ZW5fbWlycm9yX3VybDogJl9hcGJfbWF2ZW5fbWlycm9yX3VybAogIG5hbWU6IGFwYl9tYXZlbl9taXJyb3JfdXJsCiAgdGl0bGU6IE1hdmVuIE1pcnJvciBVUkwKICBkZXNjcmlwdGlvbjogTWF2ZW4gTWlycm9yIHRvIHVzZSBieSBCdXNpbmVzcyBDZW50cmFsIGFuZCBQcm9jZXNzIFNlcnZlcgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IE1hdmVuCl9hcGJfbWF2ZW5fcmVwb191cmw6ICZfYXBi\
X21hdmVuX3JlcG9fdXJsCiAgbmFtZTogYXBiX21hdmVuX3JlcG9fdXJsCiAgdGl0bGU6IE1hdmVuIFJlcG9zaXRvcnkgVVJMCiAgZGVzY3JpcHRpb246IEV4dGVybmFsIE1hdmVuIFJlcG9zaXRvcnkgVVJMLiBMZWF2ZSBlbXB0eSB0byB1c2UgdGhlIHJlcG9zaXRvcnkgcHJvdmlkZWQgYnkgQnVzaW5lc3MgQ2VudHJhbAogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IE1hdmVuCl9hcGJfbWF2ZW5fcmVwb19pZDogJl9hcGJfbWF2ZW5fcmVwb19pZAogIG5hbWU6IGFwYl9tYXZlbl9yZXBvX2lkCiAgdGl0bGU6IE1hdmVuIFJlcG9zaXRvcnkgSUQKICBkZXNjcmlwdGlvbjogVGhlIElEIHRvIHVzZSBmb3IgdGhlIG1hdmVuIHJlcG9zaXRvcnksIGlmIHNldC4gRGVmYXVs\
dCBpcyBnZW5lcmF0ZWQgcmFuZG9tbHkuCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogTWF2ZW4KX2FwYl9tYXZlbl9yZXBvX3VzZXI6ICZfYXBiX21hdmVuX3JlcG9fdXNlcgogIG5hbWU6IGFwYl9tYXZlbl9yZXBvX3VzZXIKICB0aXRsZTogTWF2ZW4gUmVwb3NpdG9yeSBVc2VybmFtZQogIGRlc2NyaXB0aW9uOiBVc2VybmFtZSB0byB1c2UgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgZXh0ZXJuYWwgTWF2ZW4gcmVwb3NpdG9yeS4KICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBNYXZlbgpfYXBiX21hdmVuX3JlcG9fcHdkOiAmX2FwYl9tYXZlbl9yZXBvX3B3ZAogIG5hbWU6IGFwYl9tYXZlbl9yZXBvX3B3ZAogIHRpdGxlOiBNYXZlbiBSZXBvc2l0b3J5IFBh\
c3N3b3JkCiAgZGVzY3JpcHRpb246IFBhc3N3b3JkIHRvIHVzZSB0byBpbnRlcmFjdCB3aXRoIHRoZSBleHRlcm5hbCBNYXZlbiByZXBvc2l0b3J5LgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfdHlwZTogcGFzc3dvcmQKICBkaXNwbGF5X2dyb3VwOiBNYXZlbgojIEdlbmVyaWMgS2V5c3RvcmUgcGFyYW1ldGVycwpfYXBiX3NlY3JldF9uYW1lOiAmX2FwYl9zZWNyZXRfbmFtZQogIHRpdGxlOiBTZWNyZXQgTmFtZQogIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBzZWNyZXQgY29udGFpbmluZyB0aGUga2V5c3RvcmUgdG8gYmUgdXNlZCBieSB0aGUgc2VydmVyIHRvIGFjY2VwdCBIVFRQUyBjb25uZWN0aW9ucy4gR2VuZXJhdGVkIGlmIGVtcHR5CiAgdHlwZTogc3RyaW5nCl9h\
cGJfa2V5c3RvcmVfbmFtZTogJl9hcGJfa2V5c3RvcmVfbmFtZQogIHRpdGxlOiBLZXlzdG9yZSBGaWxlIE5hbWUKICBkZXNjcmlwdGlvbjogTmFtZSBvZiB0aGUga2V5c3RvcmUgZmlsZSBjb250YWluaW5nIHRoZSBjZXJ0aWZpY2F0ZSB0byBiZSB1c2VkIGJ5IHRoZSBzZXJ2ZXIgdG8gYWNjZXB0IEhUVFBTIGNvbm5lY3Rpb25zLiBJZiBhIHNlY3JldCBuYW1lIGlzIG5vdCBwcm92aWRlZCwgdGhlIHNlcnZlciBnZW5lcmF0ZXMgYSBzZWNyZXQgd2l0aCB0aGlzIGtleXN0b3JlIGZpbGUgbmFtZS4KICByZXF1aXJlZDogdHJ1ZQogIHR5cGU6IHN0cmluZwogIGRlZmF1bHQ6IGtleXN0b3JlLmprcwpfYXBiX2tleXN0b3JlX2FsaWFzOiAmX2FwYl9rZXlzdG9yZV9hbGlhcwogIHRp\
dGxlOiBLZXlzdG9yZSBjZXJ0aWZpY2F0ZSBhbGlhcwogIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBjZXJ0aWZpY2F0ZSBhbGlhcyBpbmNsdWRlZCBpbiB0aGUga2V5c3RvcmUgdG8gYmUgdXNlZCBieSB0aGUgc2VydmVyIHRvIGFjY2VwdCBIVFRQUyBjb25uZWN0aW9ucy4gSWYgYSBzZWNyZXQgbmFtZSBpcyBub3QgcHJvdmlkZWQsIHRoZSBzZXJ2ZXIgZ2VuZXJhdGVzIGEgc2VyZXQgd2l0aCB0aGlzIGFsaWFzLgogIHJlcXVpcmVkOiB0cnVlCiAgdHlwZTogc3RyaW5nCiAgZGVmYXVsdDogamJvc3MKX2FwYl9rZXlzdG9yZV9wd2Q6ICZfYXBiX2tleXN0b3JlX3B3ZAogIHRpdGxlOiBLZXlzdG9yZSBhbmQgQ2VydGlmaWNhdGUgUGFzc3dvcmQKICBkZXNjcmlwdGlvbjogUGFz\
c3dvcmQgcHJvdGVjdGluZyBib3RoIHRoZSBLZXlzdG9yZSBhbmQgdGhlIENlcnRpZmljYXRlLiBHZW5lcmF0ZWQgaWYgZW1wdHkKICB0eXBlOiBzdHJpbmcKICBtaW5fbGVuZ3RoOiA2CiAgZGlzcGxheV90eXBlOiBwYXNzd29yZApfYXBiX3ZvbHVtZV9zaXplOiAmX2FwYl92b2x1bWVfc2l6ZQogIHRpdGxlOiBXb3Jrc3BhY2UgU3RvcmFnZSBTaXplCiAgcmVxdWlyZWQ6IHRydWUKICB0eXBlOiBzdHJpbmcKICBwYXR0ZXJuOiAiXlswLTldK1ttTWdHdFRdaT8kIgpfYXBiX2hvc3RuYW1lOiAmX2FwYl9ob3N0bmFtZQogIHRpdGxlOiBQdWJsaWMgSG9zdG5hbWUKICB0eXBlOiBzdHJpbmcKIyBCdXNpbmVzcyBDZW50cmFsCl9hcGJfYnVzaW5lc3NjZW50cmFsX2hvc3RuYW1lOiAm\
X2FwYl9idXNpbmVzc2NlbnRyYWxfaG9zdG5hbWUKICA8PDogKl9hcGJfaG9zdG5hbWUKICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX2hvc3RuYW1lCiAgZGVzY3JpcHRpb246IFB1YmxpYyBob3N0bmFtZSBmb3IgQnVzaW5lc3MgQ2VudHJhbC4gR2VuZXJhdGVkIGlmIGVtcHR5CiMgT0NQIEVuYWJsZW1lbnQKX2FwYl9jb250cm9sbGVyX2dsb2JhbF9kaXNjb3Zlcnk6ICZfYXBiX2NvbnRyb2xsZXJfZ2xvYmFsX2Rpc2NvdmVyeQogIG5hbWU6IGFwYl9jb250cm9sbGVyX2dsb2JhbF9kaXNjb3ZlcnkKICB0aXRsZTogRW5hYmxlIEtJRSBTZXJ2ZXIgZ2xvYmFsIGRpc2NvdmVyeQogIGRlc2NyaXB0aW9uOiBJZiBzZXQgdG8gdHJ1ZSwgdHVybnMgb24gS0lFIHNlcnZlciBnbG9i\
YWwgZGlzY292ZXJ5IGZlYXR1cmUgKFNldHMgdGhlIG9yZy5raWUuc2VydmVyLmNvbnRyb2xsZXIub3BlbnNoaWZ0Lmdsb2JhbC5kaXNjb3ZlcnkuZW5hYmxlZCBzeXN0ZW0gcHJvcGVydHkpCiAgdHlwZTogYm9vbGVhbgogIGRlZmF1bHQ6IGZhbHNlCiAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbApfYXBiX2NvbnRyb2xsZXJfcHJlZmVyX2tpZXNlcnZlcl9zdmM6ICZfYXBiX2NvbnRyb2xsZXJfcHJlZmVyX2tpZXNlcnZlcl9zdmMKICBuYW1lOiBhcGJfY29udHJvbGxlcl9wcmVmZXJfa2llc2VydmVyX3N2YwogIHRpdGxlOiBQcmVmZXIgUHJvY2VzcyBTZXJ2ZXIgT3BlblNoaWZ0IFNlcnZpY2UKICBkZXNjcmlwdGlvbjogRW5hYmxlcyBjb25uZWN0aW9uIHRvIFBy\
b2Nlc3MgU2VydmVyIHZpYSBPcGVuU2hpZnQgaW50ZXJuYWwgU2VydmljZSBlbmRwb2ludCAoU2V0cyB0aGUgb3JnLmtpZS5zZXJ2ZXIuY29udHJvbGxlci5vcGVuc2hpZnQucHJlZmVyLmtpZXNlcnZlci5zZXJ2aWNlIHN5c3RlbSBwcm9wZXJ0eSkKICB0eXBlOiBib29sZWFuCiAgZGVmYXVsdDogdHJ1ZQogIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwKX2FwYl9jb250cm9sbGVyX3RlbXBsYXRlX2NhY2hlX3R0bDogJl9hcGJfY29udHJvbGxlcl90ZW1wbGF0ZV9jYWNoZV90dGwKICBuYW1lOiBhcGJfY29udHJvbGxlcl90ZW1wbGF0ZV9jYWNoZV90dGwKICB0aXRsZTogUHJvY2VzcyBTZXJ2ZXIgVGVtcGxhdGUgQ2FjaGUgVFRMCiAgZGVzY3JpcHRpb246IFByb2Nl\
c3MgU2VydmVyIFRlbXBsYXRlIENhY2hlIFRUTCBpbiBtaWxsaXNlY29uZHMgKFNldHMgdGhlIG9yZy5raWUuc2VydmVyLmNvbnRyb2xsZXIudGVtcGxhdGUuY2FjaGUudHRsIHN5c3RlbSBwcm9wZXJ0eSkKICB0eXBlOiBudW1iZXIKICBkZWZhdWx0OiA2MDAwMAogIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwKX2FwYl9idXNpbmVzc2NlbnRyYWxfc2VjcmV0X25hbWU6ICZfYXBiX2J1c2luZXNzY2VudHJhbF9zZWNyZXRfbmFtZQogIDw8OiAqX2FwYl9zZWNyZXRfbmFtZQogIG5hbWU6IGFwYl9idXNpbmVzc2NlbnRyYWxfc2VjcmV0X25hbWUKICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKX2FwYl9idXNpbmVzc2NlbnRyYWxfa2V5\
c3RvcmVfbmFtZTogJl9hcGJfYnVzaW5lc3NjZW50cmFsX2tleXN0b3JlX25hbWUKICA8PDogKl9hcGJfa2V5c3RvcmVfbmFtZQogIG5hbWU6IGFwYl9idXNpbmVzc2NlbnRyYWxfa2V5c3RvcmVfbmFtZQogIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwpfYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9hbGlhczogJl9hcGJfYnVzaW5lc3NjZW50cmFsX2tleXN0b3JlX2FsaWFzCiAgPDw6ICpfYXBiX2tleXN0b3JlX2FsaWFzCiAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9hbGlhcwogIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwpfYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9wd2Q6\
ICZfYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9wd2QKICA8PDogKl9hcGJfa2V5c3RvcmVfcHdkCiAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9wd2QKICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKIyBHaXQgSG9va3MKX2FwYl9naXRfaG9va3NfZGlyOiAmX2FwYl9naXRfaG9va3NfZGlyCiAgbmFtZTogYXBiX2dpdF9ob29rc19kaXIKICB0aXRsZTogR2l0IGhvb2tzIGRpcmVjdG9yeQogIGRlc2NyaXB0aW9uOiBUaGUgZGlyZWN0b3J5IHRvIHVzZSBmb3IgZ2l0IGhvb2tzLCBpZiByZXF1aXJlZC4gZS5nLiAvb3B0L2tpZS9kYXRhL2dpdC9ob29rcwogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEJ1c2lu\
ZXNzIENlbnRyYWwKX2FwYl9idXNpbmVzc2NlbnRyYWxfbWF2ZW5fcmVwb191c2VyOiAmX2FwYl9idXNpbmVzc2NlbnRyYWxfbWF2ZW5fcmVwb191c2VyCiAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9tYXZlbl9yZXBvX3VzZXIKICB0aXRsZTogTWF2ZW4gUmVwb3NpdG9yeSBVc2VybmFtZQogIGRlc2NyaXB0aW9uOiBVc2VybmFtZSB0byB1c2UgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgQnVzaW5lc3MgQ2VudHJhbCBNYXZlbiByZXBvc2l0b3J5LgogIHR5cGU6IHN0cmluZwogIGRlZmF1bHQ6IG1hdmVuVXNlcgogIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwKX2FwYl9idXNpbmVzc2NlbnRyYWxfbWF2ZW5fcmVwb19wd2Q6ICZfYXBiX2J1c2luZXNzY2VudHJhbF9t\
YXZlbl9yZXBvX3B3ZAogIG5hbWU6IGFwYl9idXNpbmVzc2NlbnRyYWxfbWF2ZW5fcmVwb19wd2QKICB0aXRsZTogTWF2ZW4gUmVwb3NpdG9yeSBQYXNzd29yZAogIGRlc2NyaXB0aW9uOiBQYXNzd29yZCB0byB1c2UgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgQnVzaW5lc3MgQ2VudHJhbCBNYXZlbiByZXBvc2l0b3J5LiBHZW5lcmF0ZWQgaWYgZW1wdHkKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbAojIFByb2Nlc3MgU2VydmVyCl9hcGJfa2llc2VydmVyX21vZGU6ICZfYXBiX2tpZXNlcnZlcl9tb2RlCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9tb2RlCiAgdGl0bGU6IFByb2Nlc3MgU2VydmVyIE1v\
ZGUKICBkZXNjcmlwdGlvbjogVGhlIEtJRSBzZXJ2ZXIgbW9kZS4gVmFsaWQgdmFsdWVzIGFyZSAnREVWRUxPUE1FTlQnIG9yICdQUk9EVUNUSU9OJy4gKFNldHMgdGhlIG9yZy5raWUuc2VydmVyLm1vZGUgc3lzdGVtIHByb3BlcnR5KS4KICByZXF1aXJlZDogdHJ1ZQogIHR5cGU6IGVudW0KICBlbnVtOiBbJ0RFVkVMT1BNRU5UJywgJ1BST0RVQ1RJT04nXQogIGRlZmF1bHQ6IERFVkVMT1BNRU5UCiAgZGlzcGxheV9ncm91cDogUHJvY2VzcyBTZXJ2ZXIKX2FwYl9raWVzZXJ2ZXJfaW1hZ2Vfc3RyZWFtX25hbWU6ICZfYXBiX2tpZXNlcnZlcl9pbWFnZV9zdHJlYW1fbmFtZQogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfaW1hZ2Vfc3RyZWFtX25hbWUKICB0aXRsZTogUHJvY2VzcyBT\
ZXJ2ZXIgSW1hZ2UgU3RyZWFtIE5hbWUKICBkZXNjcmlwdGlvbjogSW1hZ2UgU3RyZWFtIE5hbWUgdG8gdXNlIGZvciBQcm9jZXNzIFNlcnZlci4gSWYgeW91IGhhdmUgZ2VuZXJhdGVkIGEgY3VzdG9tIGltYWdlIChmb3IgZXhhbXBsZSwgdG8gcHJvdmlkZSBhIGRhdGFiYXNlIHNlcnZlciBkcml2ZXIpLCB5b3UgY2FuIGNoYW5nZSB0aGlzIHBhcmFtZXRlciB0byB1c2UgaXQuCiAgcmVxdWlyZWQ6IHRydWUKICB0eXBlOiBzdHJpbmcKICBkZWZhdWx0OiByaHBhbTc0LWtpZXNlcnZlci1vcGVuc2hpZnQKICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgpfYXBiX2tpZXNlcnZlcl91c2VyOiAmX2FwYl9raWVzZXJ2ZXJfdXNlcgogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfdXNl\
cgogIHRpdGxlOiBQcm9jZXNzIFNlcnZlciBVc2VybmFtZQogIGRlc2NyaXB0aW9uOiBVc2VyIHRvIGludGVyYWN0IHdpdGggdGhlIFByb2Nlc3MgU2VydmVyIHVzaW5nIHRoZSBSRVNUIEFQSQogIHJlcXVpcmVkOiB0cnVlCiAgdHlwZTogc3RyaW5nCiAgZGVmYXVsdDogZXhlY3V0aW9uVXNlcgogIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCl9hcGJfa2llc2VydmVyX3B3ZDogJl9hcGJfa2llc2VydmVyX3B3ZAogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfcHdkCiAgdGl0bGU6IFByb2Nlc3MgU2VydmVyIFBhc3N3b3JkCiAgZGVzY3JpcHRpb246IFVzZXIgcGFzc3dvcmQgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgUHJvY2VzcyBTZXJ2ZXIgdXNpbmcgdGhlIFJFU1QgQVBJLiBH\
ZW5lcmF0ZWQgaWYgZW1wdHkKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogUHJvY2VzcyBTZXJ2ZXIKX2FwYl9raWVzZXJ2ZXJfc2VjcmV0X25hbWU6ICZfYXBiX2tpZXNlcnZlcl9zZWNyZXRfbmFtZQogIDw8OiAqX2FwYl9zZWNyZXRfbmFtZQogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfc2VjcmV0X25hbWUKICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgpfYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9uYW1lOiAmX2FwYl9raWVzZXJ2ZXJfa2V5c3RvcmVfbmFtZQogIDw8OiAqX2FwYl9rZXlzdG9yZV9uYW1lCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9uYW1lCiAgZGlzcGxheV9ncm91cDogUHJvY2VzcyBT\
ZXJ2ZXIKX2FwYl9raWVzZXJ2ZXJfa2V5c3RvcmVfYWxpYXM6ICZfYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9hbGlhcwogIDw8OiAqX2FwYl9rZXlzdG9yZV9hbGlhcwogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfa2V5c3RvcmVfYWxpYXMKICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgpfYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9wd2Q6ICZfYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9wd2QKICA8PDogKl9hcGJfa2V5c3RvcmVfcHdkCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9wd2QKICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgpfYXBiX2tpZXNlcnZlcl9ob3N0bmFtZTogJl9hcGJfa2llc2VydmVyX2hvc3RuYW1lCiAgPDw6ICpfYXBiX2hvc3RuYW1l\
CiAgbmFtZTogYXBiX2tpZXNlcnZlcl9ob3N0bmFtZQogIGRlc2NyaXB0aW9uOiBQdWJsaWMgaG9zdG5hbWUgZm9yIFByb2Nlc3MgU2VydmVyLiBHZW5lcmF0ZWQgaWYgZW1wdHkKX2FwYl9raWVzZXJ2ZXJfc3RhcnR1cF9zdHJhdGVneTogJl9hcGJfa2llc2VydmVyX3N0YXJ0dXBfc3RyYXRlZ3kKICBuYW1lOiBhcGJfa2llc2VydmVyX3N0YXJ0dXBfc3RyYXRlZ3kKICB0aXRsZTogU3RhcnR1cCBTdHJhdGVneQogIGRlc2NyaXB0aW9uOiAiV2hlbiBzZXQgdG8gT3BlblNoaWZ0U3RhcnR1cFN0cmF0ZWd5LCBhbGxvd3MgS0lFIHNlcnZlciB0byBzdGFydCB1cCBpbmRlcGVuZGVudGx5IHVzaW5nIHNoYXJlZCBzdGF0ZSBmcm9tIE9wZW5TaGlmdCBBUEkgc2VydmljZTsgd2hlbiBz\
ZXQgdG8gQ29udHJvbGxlckJhc2VkU3RhcnR1cFN0cmF0ZWd5LCBhbGxvd3MgS0lFIHNlcnZlciB0byBzdGFydCB1cCBhbmQgZnVuY3Rpb24gd2l0aCBjb25maWd1cmF0aW9uIGZyb20gYSBjb250cm9sbGVyLiBEZWZhdWx0OiBPcGVuU2hpZnRTdGFydHVwU3RyYXRlZ3kiCiAgcmVxdWlyZWQ6IHRydWUKICB0eXBlOiBlbnVtCiAgZW51bTogWydPcGVuU2hpZnRTdGFydHVwU3RyYXRlZ3knLCAnQ29udHJvbGxlckJhc2VkU3RhcnR1cFN0cmF0ZWd5J10KICBkZWZhdWx0OiBPcGVuU2hpZnRTdGFydHVwU3RyYXRlZ3kKICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgpfYXBiX2tpZXNlcnZlcl9wcm9tZXRoZXVzX2V4dF9kaXNhYmxlZDogJl9hcGJfa2llc2VydmVyX3Byb21l\
dGhldXNfZXh0X2Rpc2FibGVkCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9wcm9tZXRoZXVzX2V4dF9kaXNhYmxlZAogIHRpdGxlOiBQcm9tZXRoZXVzIFNlcnZlciBFeHRlbnNpb24gRGlzYWJsZWQKICBkZXNjcmlwdGlvbjogSWYgdW5jaGVja2VkLCB0aGUgcHJvbWV0aGV1cyBzZXJ2ZXIgZXh0ZW5zaW9uIHdpbGwgYmUgZW5hYmxlZC4gKFNldHMgdGhlIG9yZy5raWUucHJvbWV0aGV1cy5zZXJ2ZXIuZXh0LmRpc2FibGVkIHN5c3RlbSBwcm9wZXJ0eSkKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBib29sZWFuCiAgZGVmYXVsdDogdHJ1ZQogIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCl9hcGJfa2llc2VydmVyX2RiX3R5cGU6ICZfYXBiX2tpZXNlcnZlcl9kYl90eXBl\
CiAgbmFtZTogYXBiX2tpZXNlcnZlcl9kYl90eXBlCiAgdGl0bGU6IERhdGFiYXNlIFR5cGUKICBkZXNjcmlwdGlvbjogRGF0YWJhc2UgVHlwZSB0byBwZXJzaXN0IHRoZSBQcm9jZXNzIFNlcnZlciBydW50aW1lIGluZm9ybWF0aW9uLiBETyBOT1QgVVNFIEgyIGZvciBkZXBsb3lpbmcgbW9yZSB0aGFuIDEgaW5zdGFuY2Ugb2YgUHJvY2VzcyBTZXJ2ZXIuIEZvciBIMiwgUG9zdGdyZVNRTCwgYW5kIE15U1FMIHRoZSBkYXRhYmFzZSBzZXJ2ZXIgd2lsbCBiZSBkZXBsb3llZCBpbiBhIHBvZC4gVG8gdXNlIGEgZGF0YWJhc2Ugc2VydmVyIHRoYXQgaXMgZGVwbG95ZWQgZWxzZXdoZXJlLCBzZWxlY3QgRXh0ZXJuYWwuCiAgcmVxdWlyZWQ6IHRydWUKICB0eXBlOiBlbnVtCiAgZW51\
bTogWyAnSDInLCAnUG9zdGdyZVNRTCcsICdNeVNRTCcsICdFeHRlcm5hbCcgXQogIGRlZmF1bHQ6IFBvc3RncmVTUUwKICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgpfYXBiX2tpZXNlcnZlcl9kYl9zaXplOiAmX2FwYl9raWVzZXJ2ZXJfZGJfc2l6ZQogIDw8OiAqX2FwYl92b2x1bWVfc2l6ZQogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfZGJfc2l6ZQogIHRpdGxlOiBEYXRhYmFzZSBTdG9yYWdlIFNpemUKICBkZXNjcmlwdGlvbjogUGVyc2lzdGVudCBWb2x1bWUgQ2xhaW0gc2l6ZSB0byBjcmVhdGUgZm9yIHRoZSBEYXRhYmFzZS4gRm9yIGV4YW1wbGUsIDFHaS4gSWdub3JlZCBpZiBFeHRlcm5hbCBpcyBzZWxlY3RlZAogIGRlZmF1bHQ6IDFHaQogIGRpc3BsYXlfZ3Jv\
dXA6IFByb2Nlc3MgU2VydmVyCl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2RyaXZlcjogJl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2RyaXZlcgogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfZHJpdmVyCiAgdGl0bGU6IERyaXZlciBuYW1lCiAgZGVzY3JpcHRpb246IERhdGFiYXNlIGRyaXZlciB0eXBlLiBSZXF1aXJlZCBmb3IgRXh0ZXJuYWwgZGF0YWJhc2UuIEZvciBleGFtcGxlLCBteXNxbCBvciBwb3N0Z3Jlc3FsCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogRXh0ZXJuYWwgRGF0YWJhc2UgKG9ubHkgaWYgRGF0YWJhc2UgdHlwZSBpcyBFeHRlcm5hbCkKX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfZGlhbGVjdDogJl9hcGJfa2ll\
c2VydmVyX2V4dGVybmFsX2RiX2RpYWxlY3QKICBuYW1lOiBhcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2RpYWxlY3QKICB0aXRsZTogRGlhbGVjdCBjbGFzcwogIGRlc2NyaXB0aW9uOiBIaWJlcm5hdGUgZGlhbGVjdCBjbGFzcyB0byB1c2UuIFJlcXVpcmVkIGZvciBFeHRlcm5hbCBkYXRhYmFzZS4gRm9yIGV4YW1wbGUsIG9yZy5oaWJlcm5hdGUuZGlhbGVjdC5NeVNRTDU3RGlhbGVjdAogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEV4dGVybmFsIERhdGFiYXNlIChvbmx5IGlmIERhdGFiYXNlIHR5cGUgaXMgRXh0ZXJuYWwpCl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2hvc3Q6ICZfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9ob3N0CiAgbmFtZTogYXBi\
X2tpZXNlcnZlcl9leHRlcm5hbF9kYl9ob3N0CiAgdGl0bGU6IEhvc3QKICBkZXNjcmlwdGlvbjogRXh0ZXJuYWwgZGF0YWJhc2Ugc2VydmVyIGhvc3QuIFJlcXVpcmVkIGZvciBFeHRlcm5hbCBkYXRhYmFzZS4gRm9yIGV4YW1wbGUsIDEyNy4wLjAuMQogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEV4dGVybmFsIERhdGFiYXNlIChvbmx5IGlmIERhdGFiYXNlIHR5cGUgaXMgRXh0ZXJuYWwpCl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX3BvcnQ6ICZfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9wb3J0CiAgbmFtZTogYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9wb3J0CiAgdGl0bGU6IFBvcnQKICBkZXNjcmlwdGlvbjogRXh0ZXJuYWwgZGF0YWJhc2Ugc2Vy\
dmVyIHBvcnQuIFJlcXVpcmVkIGZvciBFeHRlcm5hbCBkYXRhYmFzZS4gRm9yIGV4YW1wbGUsIDMzMDYKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBFeHRlcm5hbCBEYXRhYmFzZSAob25seSBpZiBEYXRhYmFzZSB0eXBlIGlzIEV4dGVybmFsKQpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9uYW1lOiAmX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfbmFtZQogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfbmFtZQogIHRpdGxlOiBEYXRhYmFzZSBOYW1lCiAgZGVzY3JpcHRpb246IEV4dGVybmFsIERhdGFiYXNlIG5hbWUuIFJlcXVpcmVkIGZvciBFeHRlcm5hbCBkYXRhYmFzZS4gRm9yIGV4YW1wbGUsIHJocGFtCiAgdHlwZTogc3RyaW5nCiAgZGlz\
cGxheV9ncm91cDogRXh0ZXJuYWwgRGF0YWJhc2UgKG9ubHkgaWYgRGF0YWJhc2UgdHlwZSBpcyBFeHRlcm5hbCkKX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfdXJsOiAmX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfdXJsCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl91cmwKICB0aXRsZTogRGF0YWJhc2UgSkRCQyBVUkwKICBkZXNjcmlwdGlvbjogRXh0ZXJuYWwgZGF0YWJhc2Ugc2VydmVyIEpEQkMgVVJMLiBSZXF1aXJlZCBmb3IgRXh0ZXJuYWwgZGF0YWJhc2UuIEZvciBleGFtcGxlLCBqZGJjOm15c3FsOjEyNy4wLjAuMTozMzA2L3JocGFtCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogRXh0ZXJuYWwgRGF0YWJhc2UgKG9ubHkgaWYgRGF0\
YWJhc2UgdHlwZSBpcyBFeHRlcm5hbCkKCiMgSk1TIGVudnMKX2FwYl9lbmFibGVfa2llc2VydmVyX2ptc19pbnRlZ3JhdGlvbjogJl9hcGJfZW5hYmxlX2tpZXNlcnZlcl9qbXNfaW50ZWdyYXRpb24KICBuYW1lOiBhcGJfZW5hYmxlX2tpZXNlcnZlcl9qbXNfaW50ZWdyYXRpb24KICB0aXRsZTogRW5hYmxlIEpNUyBpbnRlZ3JhdGlvbgogIGRlc2NyaXB0aW9uOiBXaGVuIHNldCB0byB0cnVlIHdpbGwgY29uZmlndXJlIHRoZSBLSUUgc2VydmVyIHdpdGggSk1TIGludGVncmF0aW9uLCBpZiBubyBjb25maWd1cmF0aW9uIGlzIGFkZGVkLCB0aGUgZGVmYXVsdCB3aWxsIGJlIHVzZWQuCiAgdHlwZTogYm9vbGVhbgogIGRlZmF1bHQ6IGZhbHNlCiAgZGlzcGxheV9ncm91cDogSk1T\
IEludGVncmF0aW9uCl9hcGJfa2llc2VydmVyX2ptc19leGVjdXRvcjogJl9hcGJfa2llc2VydmVyX2ptc19leGVjdXRvcgogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfam1zX2V4ZWN1dG9yCiAgdGl0bGU6IEVuYWJsZSBKTVMgRXhlY3V0b3IKICBkZXNjcmlwdGlvbjogRW5hYmxlcyB0aGUgSk1TIGV4ZWN1dG9yLCB1bmNoZWNrIHRvIGRpc2FibGUgaXQuCiAgdHlwZTogYm9vbGVhbgogIGRlZmF1bHQ6IHRydWUKICBkaXNwbGF5X2dyb3VwOiBKTVMgSW50ZWdyYXRpb24KX2FwYl9raWVzZXJ2ZXJfam1zX3F1ZXVlX2V4ZWN1dG9yOiAmX2FwYl9raWVzZXJ2ZXJfam1zX3F1ZXVlX2V4ZWN1dG9yCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfZXhlY3V0b3IKICB0aXRsZTog\
S0lFIFNlcnZlciBKTVMgRXhlY3V0b3IgUXVldWUKICBkZXNjcmlwdGlvbjogSk5ESSBuYW1lIG9mIGV4ZWN1dG9yIHF1ZXVlIGZvciBKTVMsIGV4YW1wbGUgcXVldWUvQ1VTVE9NLktJRS5TRVJWRVIuRVhFQ1VUT1IsIGRlZmF1bHQgaXMgcXVldWUvS0lFLlNFUlZFUi5FWEVDVVRPUi4KICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBKTVMgSW50ZWdyYXRpb24KX2FwYl9raWVzZXJ2ZXJfam1zX2V4ZWN1dG9yX3RyYW5zYWN0ZWQ6ICZfYXBiX2tpZXNlcnZlcl9qbXNfZXhlY3V0b3JfdHJhbnNhY3RlZAogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfam1zX2V4ZWN1dG9yX3RyYW5zYWN0ZWQKICB0aXRsZTogS0lFIFNlcnZlciBUcmFuc2FjdGVkIEV4ZWN1dG9yCiAgZGVzY3Jp\
cHRpb246IEVuYWJsZSB0cmFuc2FjdGlvbnMgZm9yIEpNUyBleGVjdXRvciwgZGlzYWJsZWQgYnkgZGVmYXVsdC4KICB0eXBlOiBib29sZWFuCiAgZGVmYXVsdDogZmFsc2UKICBkaXNwbGF5X2dyb3VwOiBKTVMgSW50ZWdyYXRpb24KX2FwYl9raWVzZXJ2ZXJfam1zX3F1ZXVlX3JlcXVlc3Q6ICZfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfcmVxdWVzdAogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfam1zX3F1ZXVlX3JlcXVlc3QKICB0aXRsZTogS0lFIFNlcnZlciBKTVMgUmVxdWVzdCBRdWV1ZQogIGRlc2NyaXB0aW9uOiBKTkRJIG5hbWUgb2YgcmVxdWVzdCBxdWV1ZSBmb3IgSk1TLCBleGFtcGxlIHF1ZXVlL0NVU1RPTS5LSUUuU0VSVkVSLlJFUVVFU1QsIGRlZmF1bHQgaXMgcXVl\
dWUvS0lFLlNFUlZFUi5SRVFVRVNULgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEpNUyBJbnRlZ3JhdGlvbgpfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfcmVzcG9uc2U6ICZfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfcmVzcG9uc2UKICBuYW1lOiBhcGJfa2llc2VydmVyX2ptc19xdWV1ZV9yZXNwb25zZQogIHRpdGxlOiBLSUUgU2VydmVyIEpNUyBSZXNwb25zZSBRdWV1ZQogIGRlc2NyaXB0aW9uOiBKTkRJIG5hbWUgb2YgcmVzcG9uc2UgcXVldWUgZm9yIEpNUywgZXhhbXBsZSBxdWV1ZS9DVVNUT00uS0lFLlNFUlZFUi5SRVNQT05TRSwgZGVmYXVsdCBpcyBxdWV1ZS9LSUUuU0VSVkVSLlJFU1BPTlNFLgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6\
IEpNUyBJbnRlZ3JhdGlvbgpfYXBiX2tpZXNlcnZlcl9qbXNfZW5hYmxlX3NpZ25hbDogJl9hcGJfa2llc2VydmVyX2ptc19lbmFibGVfc2lnbmFsCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9qbXNfZW5hYmxlX3NpZ25hbAogIHRpdGxlOiBFbmFibGUgS0lFIFNlcnZlciBKTVMgU2lnbmFsIFF1ZXVlCiAgZGVzY3JpcHRpb246IEVuYWJsZSB0aGUgU2lnbmFsIGNvbmZpZ3VyYXRpb24gdGhyb3VnaCBKTVMuIERlZmF1bHQgaXMgZmFsc2UuCiAgdHlwZTogYm9vbGVhbgogIGRlZmF1bHQ6IGZhbHNlCiAgZGlzcGxheV9ncm91cDogSk1TIEludGVncmF0aW9uCl9hcGJfa2llc2VydmVyX2ptc19xdWV1ZV9zaWduYWw6ICZfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfc2lnbmFsCiAgbmFt\
ZTogYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfc2lnbmFsCiAgdGl0bGU6IEtJRSBTZXJ2ZXIgSk1TIFNpZ25hbCBRdWV1ZQogIGRlc2NyaXB0aW9uOiBKTkRJIG5hbWUgb2Ygc2lnbmFsIHF1ZXVlIGZvciBKTVMsIGV4YW1wbGUgcXVldWUvQ1VTVE9NLktJRS5TRVJWRVIuU0lHTkFMLCBkZWZhdWx0IGlzIHF1ZXVlL0tJRS5TRVJWRVIuU0lHTkFMLgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEpNUyBJbnRlZ3JhdGlvbgpfYXBiX2tpZXNlcnZlcl9qbXNfZW5hYmxlX2F1ZGl0OiAmX2FwYl9raWVzZXJ2ZXJfam1zX2VuYWJsZV9hdWRpdAogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfam1zX2VuYWJsZV9hdWRpdAogIHRpdGxlOiBFbmFibGUgS0lFIFNlcnZlciBKTVMgQXVk\
aXQKICBkZXNjcmlwdGlvbjogRW5hYmxlIHRoZSBBdWRpdCBsb2dnaW5nIHRocm91Z2ggSk1TLiBEZWZhdWx0IGlzIGZhbHNlLgogIHR5cGU6IGJvb2xlYW4KICBkZWZhdWx0OiBmYWxzZQogIGRpc3BsYXlfZ3JvdXA6IEpNUyBJbnRlZ3JhdGlvbgpfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfYXVkaXQ6ICZfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfYXVkaXQKICBuYW1lOiBhcGJfa2llc2VydmVyX2ptc19xdWV1ZV9hdWRpdAogIHRpdGxlOiBLSUUgU2VydmVyIEpNUyBBdWRpdCBRdWV1ZQogIGRlc2NyaXB0aW9uOiBKTkRJIG5hbWUgb2YgYXVkaXQgbG9nZ2luZyBxdWV1ZSBmb3IgSk1TLCBleGFtcGxlIHF1ZXVlL0NVU1RPTS5LSUUuU0VSVkVSLkFVRElULCBkZWZhdWx0IGlz\
IHF1ZXVlL0tJRS5TRVJWRVIuQVVESVQuCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogSk1TIEludGVncmF0aW9uCl9hcGJfa2llc2VydmVyX2ptc19hdWRpdF90cmFuc2FjdGVkOiAmX2FwYl9raWVzZXJ2ZXJfam1zX2F1ZGl0X3RyYW5zYWN0ZWQKICBuYW1lOiBhcGJfa2llc2VydmVyX2ptc19hdWRpdF90cmFuc2FjdGVkCiAgdGl0bGU6IEtJRSBTZXJ2ZXIgSk1TIEF1ZGl0IGxvZ2dlciB0cmFuc2FjdGVkCiAgZGVzY3JpcHRpb246IERldGVybWluZXMgaWYgSk1TIHNlc3Npb24gaXMgdHJhbnNhY3RlZCBvciBub3QgLSBkZWZhdWx0IHRydWUuCiAgdHlwZTogYm9vbGVhbgogIGRlZmF1bHQ6IHRydWUKICBkaXNwbGF5X2dyb3VwOiBKTVMgSW50ZWdyYXRpb24KX2Fw\
Yl9raWVzZXJ2ZXJfam1zX3VzZXJuYW1lOiAmX2FwYl9raWVzZXJ2ZXJfam1zX3VzZXJuYW1lCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9qbXNfdXNlcm5hbWUKICB0aXRsZTogQU1RIFVzZXJuYW1lCiAgZGVzY3JpcHRpb246IEFNUSBicm9rZXIgdXNlcm5hbWUgdG8gY29ubmVjdCBkbyB0aGUgQU1RLCBnZW5lcmF0ZWQgaWYgZW1wdHkuCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogSk1TIEludGVncmF0aW9uCl9hcGJfa2llc2VydmVyX2ptc19wYXNzd29yZDogJl9hcGJfa2llc2VydmVyX2ptc19wYXNzd29yZAogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfam1zX3Bhc3N3b3JkCiAgdGl0bGU6IEFNUSBQYXNzd29yZAogIGRlc2NyaXB0aW9uOiBBTVEgYnJva2VyIHBhc3N3\
b3JkIHRvIGNvbm5lY3QgZG8gdGhlIEFNUSwgZ2VuZXJhdGVkIGlmIGVtcHR5LgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEpNUyBJbnRlZ3JhdGlvbgpfYXBiX2tpZXNlcnZlcl9qbXNfYW1xX3F1ZXVlczogJl9hcGJfa2llc2VydmVyX2ptc19hbXFfcXVldWVzCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9qbXNfYW1xX3F1ZXVlcwogIHRpdGxlOiBBTVEgUXVldWVzCiAgZGVzY3JpcHRpb246IEFNUSBicm9rZXIgYnJva2VyIGNvbW1hIHNlcGFyYXRlZCBxdWV1ZXMsIGlmIHNldCB0aGUgUVVFVUVTIG5hbWUgd2lsbCBiZSBpZ25vcmVkLCBpZiBlbXB0eSB0aGUgdmFsdWVzIGZyb20gZGVmYXVsdCBxdWV1ZXMgd2lsbCBiZSB1c2VkLgogIHR5cGU6IHN0cmluZwogIGRp\
c3BsYXlfZ3JvdXA6IEpNUyBJbnRlZ3JhdGlvbgoKIyBFeHRlcm5hbCBTZXJ2aWNlcyBJbnRlZ3JhdGlvbgpfYXBiX3N2YzogJl9hcGJfc3ZjCiAgdGl0bGU6IFNlcnZpY2UgbmFtZQogIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBTZXJ2aWNlCiAgdHlwZTogc3RyaW5nCl9hcGJfaG9zdDogJl9hcGJfaG9zdAogIHRpdGxlOiBIb3N0CiAgZGVzY3JpcHRpb246IEhvc3QKICB0eXBlOiBzdHJpbmcKX2FwYl9wb3J0OiAmX2FwYl9wb3J0CiAgdGl0bGU6IEhvc3QgcG9ydAogIGRlc2NyaXB0aW9uOiBIb3N0IHBvcnQKICB0eXBlOiBzdHJpbmcKX2FwYl9wcm90b2NvbF90eXBlOiAmX2FwYl9wcm90b2NvbF90eXBlCiAgdGl0bGU6IEhvc3QgUHJvdG9jb2wKICBkZXNjcmlwdGlvbjog\
SG9zdCBwcm90b2NvbCAoaHR0cC9odHRwcykKICB0eXBlOiBlbnVtCiAgZW51bTogWyAnaHR0cCcsICdodHRwcycgXQojIFJvdXRlcgpfYXBiX3JvdXRlcl9zdmM6ICZfYXBiX3JvdXRlcl9zdmMKICA8PDogKl9hcGJfc3ZjCiAgbmFtZTogYXBiX3JvdXRlcl9zdmMKICBkaXNwbGF5X2dyb3VwOiBSb3V0ZXIgSW50ZWdyYXRpb24KX2FwYl9yb3V0ZXJfaG9zdDogJl9hcGJfcm91dGVyX2hvc3QKICA8PDogKl9hcGJfaG9zdAogIG5hbWU6IGFwYl9yb3V0ZXJfaG9zdAogIGRpc3BsYXlfZ3JvdXA6IFJvdXRlciBJbnRlZ3JhdGlvbgpfYXBiX3JvdXRlcl9wb3J0OiAmX2FwYl9yb3V0ZXJfcG9ydAogIDw8OiAqX2FwYl9wb3J0CiAgbmFtZTogYXBiX3JvdXRlcl9wb3J0CiAgZGlzcGxh\
eV9ncm91cDogUm91dGVyIEludGVncmF0aW9uCl9hcGJfcm91dGVyX3Byb3RvY29sOiAmX2FwYl9yb3V0ZXJfcHJvdG9jb2wKICA8PDogKl9hcGJfcHJvdG9jb2xfdHlwZQogIG5hbWU6IGFwYl9yb3V0ZXJfcHJvdG9jb2wKICBkaXNwbGF5X2dyb3VwOiBSb3V0ZXIgSW50ZWdyYXRpb24KIyBDb250cm9sbGVyCl9hcGJfY29udHJvbGxlcl9zdmM6ICZfYXBiX2NvbnRyb2xsZXJfc3ZjCiAgPDw6ICpfYXBiX3N2YwogIG5hbWU6IGFwYl9jb250cm9sbGVyX3N2YwogIGRpc3BsYXlfZ3JvdXA6IENvbnRyb2xsZXIgSW50ZWdyYXRpb24KX2FwYl9jb250cm9sbGVyX2hvc3Q6ICZfYXBiX2NvbnRyb2xsZXJfaG9zdAogIDw8OiAqX2FwYl9ob3N0CiAgbmFtZTogYXBiX2NvbnRyb2xsZXJf\
aG9zdAogIGRpc3BsYXlfZ3JvdXA6IENvbnRyb2xsZXIgSW50ZWdyYXRpb24KX2FwYl9jb250cm9sbGVyX3BvcnQ6ICZfYXBiX2NvbnRyb2xsZXJfcG9ydAogIDw8OiAqX2FwYl9wb3J0CiAgbmFtZTogYXBiX2NvbnRyb2xsZXJfcG9ydAogIGRpc3BsYXlfZ3JvdXA6IENvbnRyb2xsZXIgSW50ZWdyYXRpb24KX2FwYl9jb250cm9sbGVyX3Byb3RvY29sOiAmX2FwYl9jb250cm9sbGVyX3Byb3RvY29sCiAgPDw6ICpfYXBiX3Byb3RvY29sX3R5cGUKICBuYW1lOiBhcGJfY29udHJvbGxlcl9wcm90b2NvbAogIGRpc3BsYXlfZ3JvdXA6IENvbnRyb2xsZXIgSW50ZWdyYXRpb24KX2FwYl9jb250cm9sbGVyX3Rva2VuOiAmX2FwYl9jb250cm9sbGVyX3Rva2VuCiAgbmFtZTogYXBiX2Nv\
bnRyb2xsZXJfdG9rZW4KICB0aXRsZTogQ29udHJvbGxlciBBdXRoIFRva2VuCiAgZGVzY3JpcHRpb246IENvbnRyb2xsZXIgYXV0aGVudGljYXRpb24gVG9rZW4KICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBDb250cm9sbGVyIEludGVncmF0aW9uCl9hcGJfY29udHJvbGxlcl91c2VyOiAmX2FwYl9jb250cm9sbGVyX3VzZXIKICBuYW1lOiBhcGJfY29udHJvbGxlcl91c2VyCiAgdGl0bGU6IENvbnRyb2xsZXIgVXNlcm5hbWUKICBkZXNjcmlwdGlvbjogVXNlcm5hbWUgdG8gYWNjZXNzIHRoZSBDb250cm9sbGVyCiAgdHlwZTogc3RyaW5nCiAgZGVmYXVsdDogbW9uaXRvclVzZXIKX2FwYl9jb250cm9sbGVyX3B3ZDogJl9hcGJfY29udHJvbGxlcl9wd2QKICBuYW1l\
OiBhcGJfY29udHJvbGxlcl9wd2QKICB0aXRsZTogQ29udHJvbGxlciBQYXNzd29yZAogIGRlc2NyaXB0aW9uOiBVc2VyIHBhc3N3b3JkIHRvIGFjY2VzcyB0aGUgQ29udHJvbGxlci4gR2VuZXJhdGVkIGlmIGVtcHR5LgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfdHlwZTogcGFzc3dvcmQKIyBSSC1TU08KX2FwYl9zc29fdXJsOiAmX2FwYl9zc29fdXJsCiAgbmFtZTogYXBiX3Nzb191cmwKICB0aXRsZTogUkgtU1NPIFVSTAogIGRlc2NyaXB0aW9uOiBSZWQgSGF0IFNpbmdsZSBTaWduLU9uIChTU08pIFVSTC4gTGVhdmUgZW1wdHkgdG8gYXZvaWQgdXNpbmcgU1NPLiBGb3IgZXhhbXBsZSwgaHR0cHM6Ly9yaHNzby5leGFtcGxlLmNvbS9hdXRoCiAgdHlwZTogc3RyaW5nCiAg\
ZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fcmVhbG06ICZfYXBiX3Nzb19yZWFsbQogIG5hbWU6IGFwYl9zc29fcmVhbG0KICB0aXRsZTogUkgtU1NPIFJlYWxtCiAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gUmVhbG0gbmFtZS4gRm9yIGV4YW1wbGUsIHJocGFtCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fY2xpZW50OiAmX2FwYl9zc29fY2xpZW50CiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fY2xpZW50X3Nl\
Y3JldDogJl9hcGJfc3NvX2NsaWVudF9zZWNyZXQKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fdXNlcjogJl9hcGJfc3NvX3VzZXIKICBuYW1lOiBhcGJfc3NvX3VzZXIKICB0aXRsZTogUkgtU1NPIEFkbWluIFVzZXIKICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBVc2VyIHRvIGJlIHVzZWQgdG8gY3JlYXRlIHRoZSBDbGllbnQgaWYgaXQgZG9lc24ndCBleGlzdC4gVGhlIHVzZXIgbXVzdCBiZSBhYmxlIHRvIGNyZWF0ZSBzZWNyZXRzIG9uIHRoZSBnaXZlbiByZWFsbS4KICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dy\
b3VwOiBSZWQgSGF0IC0gU2luZ2xlIFNpZ24tT24gKE9wdGlvbmFsKQpfYXBiX3Nzb19wd2Q6ICZfYXBiX3Nzb19wd2QKICBuYW1lOiBhcGJfc3NvX3B3ZAogIHRpdGxlOiBSSC1TU08gQWRtaW4gUGFzc3dvcmQKICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBQYXNzd29yZCB0byB1c2UgdG8gY3JlYXRlIHRoZSBDbGllbnQgaWYgaXQgZG9lc24ndCBleGlzdC4KICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fZGlzYWJsZV9zc2xfY2VydF92YWxpZGF0aW9uOiAmX2FwYl9zc29fZGlzYWJsZV9zc2xfY2VydF92YWxpZGF0aW9u\
CiAgbmFtZTogYXBiX3Nzb19kaXNhYmxlX3NzbF9jZXJ0X3ZhbGlkYXRpb24KICB0aXRsZTogUkgtU1NPIERpc2FibGUgU1NMIFZhbGlkYXRpb24KICBkZXNjcmlwdGlvbjogRGlzYWJsZSBTU0wgQ2VydGlmaWNhdGUgVmFsaWRhdGlvbiB3aGVuIGNvbm5lY3RpbmcgdG8gUkgtU1NPCiAgdHlwZTogYm9vbGVhbgogIGRpc3BsYXlfZ3JvdXA6IFJlZCBIYXQgLSBTaW5nbGUgU2lnbi1PbiAoT3B0aW9uYWwpCl9hcGJfc3NvX3ByaW5jaXBhbF9hdHRyaWJ1dGU6ICZfYXBiX3Nzb19wcmluY2lwYWxfYXR0cmlidXRlCiAgbmFtZTogYXBiX3Nzb19wcmluY2lwYWxfYXR0cmlidXRlCiAgdGl0bGU6IFJILVNTTyBQcmluY2lwYWwgQXR0cmlidXRlCiAgZGVzY3JpcHRpb246IFByaW5jaXBh\
bCBhdHRyaWJ1dGUgdG8gdXNlIGFzIHVzZXJuYW1lCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKIyBMREFQIEF1dGgKX2FwYl9hdXRoX2xkYXBfdXJsOiAmX2FwYl9hdXRoX2xkYXBfdXJsCiAgbmFtZTogYXBiX2F1dGhfbGRhcF91cmwKICB0aXRsZTogTERBUCBFbmRwb2ludAogIGRlc2NyaXB0aW9uOiBMREFQIEVuZHBvaW50IHRvIGNvbm5lY3QgZm9yIGF1dGhlbnRpY2F0aW9uLiBlLmcuICJsZGFwOi8vbXlsZGFwLmV4YW1wbGUuY29tIgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF9iaW5kX2RuOiAmX2FwYl9hdXRoX2xkYXBfYmlu\
ZF9kbgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfYmluZF9kbgogIHRpdGxlOiBMREFQIEJpbmQgRE4KICBkZXNjcmlwdGlvbjogQmluZCBETiB1c2VkIGZvciBhdXRoZW50aWNhdGlvbi4gZS5nLiAidWlkPWFkbWluLG91PXVzZXJzLG91PWV4bWFtcGxlLG91PWNvbSIKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfYmluZF9jcmVkZW50aWFsOiAmX2FwYl9hdXRoX2xkYXBfYmluZF9jcmVkZW50aWFsCiAgbmFtZTogYXBiX2F1dGhfbGRhcF9iaW5kX2NyZWRlbnRpYWwKICB0aXRsZTogTERBUCBCaW5kIENyZWRlbnRpYWxzCiAgZGVzY3JpcHRpb246IExEQVAgQ3JlZGVudGlhbHMgdXNlZCBmb3IgYXV0aGVudGljYXRp\
b24KICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX2phYXNfc2VjdXJpdHlfZG9tYWluOiAmX2FwYl9hdXRoX2xkYXBfamFhc19zZWN1cml0eV9kb21haW4KICBuYW1lOiBhcGJfYXV0aF9sZGFwX2phYXNfc2VjdXJpdHlfZG9tYWluCiAgdGl0bGU6IExEQVAgSkFBUyBTZWN1cml0eSBEb21haW4KICBkZXNjcmlwdGlvbjogVGhlIEpNWCBPYmplY3ROYW1lIG9mIHRoZSBKYWFzU2VjdXJpdHlEb21haW4gdXNlZCB0byBkZWNyeXB0IHRoZSBwYXNzd29yZC4KICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfYmFz\
ZV9jdHhfZG46ICZfYXBiX2F1dGhfbGRhcF9iYXNlX2N0eF9kbgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfYmFzZV9jdHhfZG4KICB0aXRsZTogTERBUCBCYXNlIEROCiAgZGVzY3JpcHRpb246IExEQVAgQmFzZSBETiBvZiB0aGUgdG9wLWxldmVsIGNvbnRleHQgdG8gYmVnaW4gdGhlIHVzZXIgc2VhcmNoLiBlLmcuICJvdT11c2VycyxvdT1leGFtcGxlLG91PWNvbSIKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfYmFzZV9maWx0ZXI6ICZfYXBiX2F1dGhfbGRhcF9iYXNlX2ZpbHRlcgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfYmFzZV9maWx0ZXIKICB0aXRsZTogTERBUCBCYXNlIFNlYXJjaCBmaWx0ZXIKICBkZXNj\
cmlwdGlvbjogTERBUCBzZWFyY2ggZmlsdGVyIHVzZWQgdG8gbG9jYXRlIHRoZSBjb250ZXh0IG9mIHRoZSB1c2VyIHRvIGF1dGhlbnRpY2F0ZS4gVGhlIGlucHV0IHVzZXJuYW1lIG9yIHVzZXJETiBvYnRhaW5lZCBmcm9tIHRoZSBsb2dpbiBtb2R1bGUgY2FsbGJhY2sgaXMgc3Vic3RpdHV0ZWQgaW50byB0aGUgZmlsdGVyIGFueXdoZXJlIGEgezB9IGV4cHJlc3Npb24gaXMgdXNlZC4gQSBjb21tb24gZXhhbXBsZSBmb3IgdGhlIHNlYXJjaCBmaWx0ZXIgaXMgKHVpZD17MH0pLgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF9zZWFyY2hfc2NvcGU6ICZfYXBiX2F1dGhfbGRhcF9zZWFyY2hfc2NvcGUKICBuYW1l\
OiBhcGJfYXV0aF9sZGFwX3NlYXJjaF9zY29wZQogIHRpdGxlOiBMREFQIFNlYXJjaCBzY29wZQogIGRlc2NyaXB0aW9uOiBUaGUgc2VhcmNoIHNjb3BlIHRvIHVzZS4KICB0eXBlOiBlbnVtCiAgZW51bTogWyAnU1VCVFJFRV9TQ09QRScsICdPQkpFQ1RfU0NPUEUnLCAnT05FTEVWRUxfU0NPUEUnIF0KICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfc2VhcmNoX3RpbWVfbGltaXQ6ICZfYXBiX2F1dGhfbGRhcF9zZWFyY2hfdGltZV9saW1pdAogIG5hbWU6IGFwYl9hdXRoX2xkYXBfc2VhcmNoX3RpbWVfbGltaXQKICB0aXRsZTogTERBUCBTZWFyY2ggdGltZSBsaW1pdAogIGRlc2NyaXB0aW9uOiBUaGUgdGltZW91dCBpbiBtaWxsaXNlY29u\
ZHMgZm9yIHVzZXIgb3Igcm9sZSBzZWFyY2hlcy4gZS5nLiAiMTAwMDAiCiAgdHlwZTogbnVtYmVyCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX2Rpc3Rpbmd1aXNoZWRfbmFtZV9hdHRyaWJ1dGU6ICZfYXBiX2F1dGhfbGRhcF9kaXN0aW5ndWlzaGVkX25hbWVfYXR0cmlidXRlCiAgbmFtZTogYXBiX2F1dGhfbGRhcF9kaXN0aW5ndWlzaGVkX25hbWVfYXR0cmlidXRlCiAgdGl0bGU6IExEQVAgRE4gYXR0cmlidXRlCiAgZGVzY3JpcHRpb246IFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgaW4gdGhlIHVzZXIgZW50cnkgdGhhdCBjb250YWlucyB0aGUgRE4gb2YgdGhlIHVzZXIuIFRoaXMgbWF5IGJlIG5lY2Vzc2FyeSBpZiB0aGUgRE4g\
b2YgdGhlIHVzZXIgaXRzZWxmIGNvbnRhaW5zIHNwZWNpYWwgY2hhcmFjdGVycywgYmFja3NsYXNoIGZvciBleGFtcGxlLCB0aGF0IHByZXZlbnQgY29ycmVjdCB1c2VyIG1hcHBpbmcuIElmIHRoZSBhdHRyaWJ1dGUgZG9lcyBub3QgZXhpc3QsIHRoZSBlbnRyeeKAmXMgRE4gaXMgdXNlZC4KICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfcGFyc2VfdXNlcm5hbWU6ICZfYXBiX2F1dGhfbGRhcF9wYXJzZV91c2VybmFtZQogIG5hbWU6IGFwYl9hdXRoX2xkYXBfcGFyc2VfdXNlcm5hbWUKICB0aXRsZTogTERBUCBQYXJzZSB1c2VybmFtZQogIGRlc2NyaXB0aW9uOiBBIGZsYWcgaW5kaWNhdGluZyBpZiB0aGUgRE4g\
aXMgdG8gYmUgcGFyc2VkIGZvciB0aGUgdXNlcm5hbWUuIElmIHNldCB0byB0cnVlLCB0aGUgRE4gaXMgcGFyc2VkIGZvciB0aGUgdXNlcm5hbWUuIElmIHNldCB0byBmYWxzZSB0aGUgRE4gaXMgbm90IHBhcnNlZCBmb3IgdGhlIHVzZXJuYW1lLiBUaGlzIG9wdGlvbiBpcyB1c2VkIHRvZ2V0aGVyIHdpdGggdXNlcm5hbWVCZWdpblN0cmluZyBhbmQgdXNlcm5hbWVFbmRTdHJpbmcuCiAgdHlwZTogYm9vbGVhbgogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9iZWdpbl9zdHJpbmc6ICZfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9iZWdpbl9zdHJpbmcKICBuYW1lOiBhcGJfYXV0aF9sZGFwX3VzZXJuYW1lX2JlZ2luX3N0cmlu\
ZwogIHRpdGxlOiBMREFQIFVzZXJuYW1lIGJlZ2luIHN0cmluZwogIGRlc2NyaXB0aW9uOiBEZWZpbmVzIHRoZSBTdHJpbmcgd2hpY2ggaXMgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgRE4gdG8gcmV2ZWFsIHRoZSB1c2VybmFtZS4gVGhpcyBvcHRpb24gaXMgdXNlZCB0b2dldGhlciB3aXRoIHVzZXJuYW1lRW5kU3RyaW5nIGFuZCBvbmx5IHRha2VuIGludG8gYWNjb3VudCBpZiBwYXJzZVVzZXJuYW1lIGlzIHNldCB0byB0cnVlLgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9lbmRfc3RyaW5nOiAmX2FwYl9hdXRoX2xkYXBfdXNlcm5hbWVfZW5kX3N0cmluZwogIG5hbWU6\
IGFwYl9hdXRoX2xkYXBfdXNlcm5hbWVfZW5kX3N0cmluZwogIHRpdGxlOiBMREFQIFVzZXJuYW1lIGVuZCBzdHJpbmcKICBkZXNjcmlwdGlvbjogRGVmaW5lcyB0aGUgU3RyaW5nIHdoaWNoIGlzIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgZW5kIG9mIHRoZSBETiB0byByZXZlYWwgdGhlIHVzZXJuYW1lLiBUaGlzIG9wdGlvbiBpcyB1c2VkIHRvZ2V0aGVyIHdpdGggdXNlcm5hbWVFbmRTdHJpbmcgYW5kIG9ubHkgdGFrZW4gaW50byBhY2NvdW50IGlmIHBhcnNlVXNlcm5hbWUgaXMgc2V0IHRvIHRydWUuCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lkOiAmX2FwYl9hdXRoX2xkYXBf\
cm9sZV9hdHRyaWJ1dGVfaWQKICBuYW1lOiBhcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lkCiAgdGl0bGU6IExEQVAgUm9sZSBhdHRyaWJ1dGVJRAogIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBhdHRyaWJ1dGUgY29udGFpbmluZyB0aGUgdXNlciByb2xlcy4gZS5nLiAibWVtYmVyT2YiCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX3JvbGVzX2N0eF9kbjogJl9hcGJfYXV0aF9sZGFwX3JvbGVzX2N0eF9kbgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfcm9sZXNfY3R4X2RuCiAgdGl0bGU6IExEQVAgUm9sZXMgU2VhcmNoIEROCiAgZGVzY3JpcHRpb246IFRoZSBmaXhlZCBETiBvZiB0aGUgY29udGV4dCB0\
byBzZWFyY2ggZm9yIHVzZXIgcm9sZXMuIFRoaXMgaXMgbm90IHRoZSBETiB3aGVyZSB0aGUgYWN0dWFsIHJvbGVzIGFyZSwgYnV0IHRoZSBETiB3aGVyZSB0aGUgb2JqZWN0cyBjb250YWluaW5nIHRoZSB1c2VyIHJvbGVzIGFyZS4gRm9yIGV4YW1wbGUsIGluIGEgTWljcm9zb2Z0IEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyLCB0aGlzIGlzIHRoZSBETiB3aGVyZSB0aGUgdXNlciBhY2NvdW50IGlzLgogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF9yb2xlX2ZpbHRlcjogJl9hcGJfYXV0aF9sZGFwX3JvbGVfZmlsdGVyCiAgbmFtZTogYXBiX2F1dGhfbGRhcF9yb2xlX2ZpbHRlcgogIHRpdGxlOiBMREFQIFJvbGUg\
c2VhcmNoIGZpbHRlcgogIGRlc2NyaXB0aW9uOiBBIHNlYXJjaCBmaWx0ZXIgdXNlZCB0byBsb2NhdGUgdGhlIHJvbGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXV0aGVudGljYXRlZCB1c2VyLiBUaGUgaW5wdXQgdXNlcm5hbWUgb3IgdXNlckROIG9idGFpbmVkIGZyb20gdGhlIGxvZ2luIG1vZHVsZSBjYWxsYmFjayBpcyBzdWJzdGl0dXRlZCBpbnRvIHRoZSBmaWx0ZXIgYW55d2hlcmUgYSB7MH0gZXhwcmVzc2lvbiBpcyB1c2VkLiBUaGUgYXV0aGVudGljYXRlZCB1c2VyRE4gaXMgc3Vic3RpdHV0ZWQgaW50byB0aGUgZmlsdGVyIGFueXdoZXJlIGEgezF9IGlzIHVzZWQuIEFuIGV4YW1wbGUgc2VhcmNoIGZpbHRlciB0aGF0IG1hdGNoZXMgb24gdGhlIGlucHV0IHVzZXJuYW1l\
IGlzIChtZW1iZXI9ezB9KS4gQW4gYWx0ZXJuYXRpdmUgdGhhdCBtYXRjaGVzIG9uIHRoZSBhdXRoZW50aWNhdGVkIHVzZXJETiBpcyAobWVtYmVyPXsxfSkuCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX3JvbGVfcmVjdXJzaW9uOiAmX2FwYl9hdXRoX2xkYXBfcm9sZV9yZWN1cnNpb24KICBuYW1lOiBhcGJfYXV0aF9sZGFwX3JvbGVfcmVjdXJzaW9uCiAgdGl0bGU6IExEQVAgUm9sZSByZWN1cnNpb24KICBkZXNjcmlwdGlvbjogVGhlIG51bWJlciBvZiBsZXZlbHMgb2YgcmVjdXJzaW9uIHRoZSByb2xlIHNlYXJjaCB3aWxsIGdvIGJlbG93IGEgbWF0Y2hpbmcgY29udGV4dC4gRGlzYWJsZSByZWN1cnNpb24g\
Ynkgc2V0dGluZyB0aGlzIHRvIDAuCiAgdHlwZTogbnVtYmVyCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX2RlZmF1bHRfcm9sZTogJl9hcGJfYXV0aF9sZGFwX2RlZmF1bHRfcm9sZQogIG5hbWU6IGFwYl9hdXRoX2xkYXBfZGVmYXVsdF9yb2xlCiAgdGl0bGU6IExEQVAgRGVmYXVsdCByb2xlCiAgZGVzY3JpcHRpb246IEEgcm9sZSBpbmNsdWRlZCBmb3IgYWxsIGF1dGhlbnRpY2F0ZWQgdXNlcnMKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfcm9sZV9uYW1lX2F0dHJpYnV0ZV9pZDogJl9hcGJfYXV0aF9sZGFwX3JvbGVfbmFtZV9hdHRyaWJ1dGVfaWQKICBuYW1lOiBh\
cGJfYXV0aF9sZGFwX3JvbGVfbmFtZV9hdHRyaWJ1dGVfaWQKICB0aXRsZTogTERBUCBSb2xlIG5hbWUgYXR0cmlidXRlIElECiAgZGVzY3JpcHRpb246IE5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB3aXRoaW4gdGhlIHJvbGVDdHhETiBjb250ZXh0IHdoaWNoIGNvbnRhaW5zIHRoZSByb2xlIG5hbWUuIElmIHRoZSByb2xlQXR0cmlidXRlSXNETiBwcm9wZXJ0eSBpcyBzZXQgdG8gdHJ1ZSwgdGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHRvIGZpbmQgdGhlIHJvbGUgb2JqZWN04oCZcyBuYW1lIGF0dHJpYnV0ZS4KICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfcGFyc2Vfcm9sZV9uYW1lX2Zyb21fZG46ICZfYXBiX2F1dGhf\
bGRhcF9wYXJzZV9yb2xlX25hbWVfZnJvbV9kbgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfcGFyc2Vfcm9sZV9uYW1lX2Zyb21fZG4KICB0aXRsZTogTERBUCBSb2xlIEROIGNvbnRhaW5zIHJvbGVOYW1lQXR0cmlidXRlSUQKICBkZXNjcmlwdGlvbjogQSBmbGFnIGluZGljYXRpbmcgaWYgdGhlIEROIHJldHVybmVkIGJ5IGEgcXVlcnkgY29udGFpbnMgdGhlIHJvbGVOYW1lQXR0cmlidXRlSUQuIElmIHNldCB0byB0cnVlLCB0aGUgRE4gaXMgY2hlY2tlZCBmb3IgdGhlIHJvbGVOYW1lQXR0cmlidXRlSUQuIElmIHNldCB0byBmYWxzZSwgdGhlIEROIGlzIG5vdCBjaGVja2VkIGZvciB0aGUgcm9sZU5hbWVBdHRyaWJ1dGVJRC4gVGhpcyBmbGFnIGNhbiBpbXByb3ZlIHRoZSBwZXJm\
b3JtYW5jZSBvZiBMREFQIHF1ZXJpZXMuCiAgdHlwZTogYm9vbGVhbgogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF9yb2xlX2F0dHJpYnV0ZV9pc19kbjogJl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lzX2RuCiAgbmFtZTogYXBiX2F1dGhfbGRhcF9yb2xlX2F0dHJpYnV0ZV9pc19kbgogIHRpdGxlOiBMREFQIFJvbGUgQXR0cmlidXRlIElEIGlzIEROCiAgZGVzY3JpcHRpb246IFdoZXRoZXIgb3Igbm90IHRoZSByb2xlQXR0cmlidXRlSUQgY29udGFpbnMgdGhlIGZ1bGx5LXF1YWxpZmllZCBETiBvZiBhIHJvbGUgb2JqZWN0LiBJZiBmYWxzZSwgdGhlIHJvbGUgbmFtZSBpcyB0YWtlbiBmcm9tIHRoZSB2YWx1ZSBvZiB0aGUg\
cm9sZU5hbWVBdHRyaWJ1dGVJZCBhdHRyaWJ1dGUgb2YgdGhlIGNvbnRleHQgbmFtZS4gQ2VydGFpbiBkaXJlY3Rvcnkgc2NoZW1hcywgc3VjaCBhcyBNaWNyb3NvZnQgQWN0aXZlIERpcmVjdG9yeSwgcmVxdWlyZSB0aGlzIGF0dHJpYnV0ZSB0byBiZSBzZXQgdG8gdHJ1ZS4KICB0eXBlOiBib29sZWFuCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX3JlZmVycmFsX3VzZXJfYXR0cmlidXRlX2lkX3RvX2NoZWNrOiAmX2FwYl9hdXRoX2xkYXBfcmVmZXJyYWxfdXNlcl9hdHRyaWJ1dGVfaWRfdG9fY2hlY2sKICBuYW1lOiBhcGJfYXV0aF9sZGFwX3JlZmVycmFsX3VzZXJfYXR0cmlidXRlX2lkX3RvX2NoZWNrCiAgdGl0bGU6IExEQVAgUmVm\
ZXJyYWwgdXNlciBhdHRyaWJ1dGUgSUQKICBkZXNjcmlwdGlvbjogSWYgeW91IGFyZSBub3QgdXNpbmcgcmVmZXJyYWxzLCB0aGlzIG9wdGlvbiBjYW4gYmUgaWdub3JlZC4gV2hlbiB1c2luZyByZWZlcnJhbHMsIHRoaXMgb3B0aW9uIGRlbm90ZXMgdGhlIGF0dHJpYnV0ZSBuYW1lIHdoaWNoIGNvbnRhaW5zIHVzZXJzIGRlZmluZWQgZm9yIGEgY2VydGFpbiByb2xlLCBmb3IgZXhhbXBsZSBtZW1iZXIsIGlmIHRoZSByb2xlIG9iamVjdCBpcyBpbnNpZGUgdGhlIHJlZmVycmFsLiBVc2VycyBhcmUgY2hlY2tlZCBhZ2FpbnN0IHRoZSBjb250ZW50IG9mIHRoaXMgYXR0cmlidXRlIG5hbWUuIElmIHRoaXMgb3B0aW9uIGlzIG5vdCBzZXQsIHRoZSBjaGVjayB3aWxsIGFsd2F5cyBm\
YWlsLCBzbyByb2xlIG9iamVjdHMgY2Fubm90IGJlIHN0b3JlZCBpbiBhIHJlZmVycmFsIHRyZWUuCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9yb2xlX21hcHBlcl9yb2xlc19wcm9wZXJ0aWVzOiAmX2FwYl9hdXRoX3JvbGVfbWFwcGVyX3JvbGVzX3Byb3BlcnRpZXMKICBuYW1lOiBhcGJfYXV0aF9yb2xlX21hcHBlcl9yb2xlc19wcm9wZXJ0aWVzCiAgdGl0bGU6IFJvbGVNYXBwaW5nIHJvbGVzUHJvcGVydGllcyBmaWxlIHBhdGgKICBkZXNjcmlwdGlvbjogV2hlbiBwcmVzZW50LCB0aGUgUm9sZU1hcHBpbmcgTG9naW4gTW9kdWxlIHdpbGwgYmUgY29uZmlndXJlZCB0byB1c2UgdGhlIHByb3ZpZGVkIGZpbGUuIFRo\
aXMgcHJvcGVydHkgZGVmaW5lcyB0aGUgZnVsbHktcXVhbGlmaWVkIGZpbGUgcGF0aCBhbmQgbmFtZSBvZiBhIHByb3BlcnRpZXMgZmlsZSBvciByZXNvdXJjZSB3aGljaCBtYXBzIHJvbGVzIHRvIHJlcGxhY2VtZW50IHJvbGVzLiBUaGUgZm9ybWF0IGlzIG9yaWdpbmFsX3JvbGU9cm9sZTEscm9sZTIscm9sZTMKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBSb2xlTWFwcGluZyAoT3B0aW9uYWwpCl9hcGJfYXV0aF9yb2xlX21hcHBlcl9yZXBsYWNlX3JvbGU6ICZfYXBiX2F1dGhfcm9sZV9tYXBwZXJfcmVwbGFjZV9yb2xlCiAgbmFtZTogYXBiX2F1dGhfcm9sZV9tYXBwZXJfcmVwbGFjZV9yb2xlCiAgdGl0bGU6IFJvbGVNYXBwaW5nIHJlcGxhY2VSb2xlIHByb3Bl\
cnR5CiAgZGVzY3JpcHRpb246IFdoZXRoZXIgdG8gYWRkIHRvIHRoZSBjdXJyZW50IHJvbGVzLCBvciByZXBsYWNlIHRoZSBjdXJyZW50IHJvbGVzIHdpdGggdGhlIG1hcHBlZCBvbmVzLiBSZXBsYWNlcyBpZiBzZXQgdG8gdHJ1ZS4KICB0eXBlOiBib29sZWFuCiAgZGlzcGxheV9ncm91cDogUm9sZU1hcHBpbmcgKE9wdGlvbmFsKQojIFNtYXJ0IFJvdXRlciBQcm9wcGVydGllcwpfYXBiX3NtYXJ0cm91dGVyX3Byb3RvY29sOiAmX2FwYl9zbWFydHJvdXRlcl9wcm90b2NvbAogIDw8OiAqX2FwYl9wcm90b2NvbF90eXBlCiAgbmFtZTogYXBiX3NtYXJ0cm91dGVyX3Byb3RvY29sCiAgZGVmYXVsdDogaHR0cAogIGRpc3BsYXlfZ3JvdXA6IFNtYXJ0IFJvdXRlcgpfYXBiX3NtYXJ0\
cm91dGVyX3VzZV9leHRlcm5hbF9yb3V0ZTogJl9hcGJfc21hcnRyb3V0ZXJfdXNlX2V4dGVybmFsX3JvdXRlCiAgbmFtZTogYXBiX3NtYXJ0cm91dGVyX3VzZV9leHRlcm5hbF9yb3V0ZQogIHR5cGU6IGJvb2xlYW4KICBkZWZhdWx0OiBmYWxzZQogIGRlc2NyaXB0aW9uOiBJZiBlbmFibGVkLCBCdXNpbmVzZXMgQ2VudHJhbCB3aWxsIHVzZSB0aGUgZXh0ZXJuYWwgc21hcnRyb3V0ZXIgcm91dGUgdG8gY29tbXVuaWNhdGUgd2l0aC4gTm90ZSB0aGF0LCB2YWxpZCBTU0wgY2VydGlmaWNhdGVzIHNob3VsZCBiZSB1c2VkLgogIGRpc3BsYXlfZ3JvdXA6IFNtYXJ0IFJvdXRlcgoKIyBBUEIgU3BlYyB2ZXJzaW9uLCBkb24ndCBjaGFuZ2UgaXQgdW5sZXNzIFRoZSBBUEIgYXBpIGlz\
IHVwZGF0ZWQuCnZlcnNpb246IDEuMApuYW1lOiByaHBhbS1hcGIKZGVzY3JpcHRpb246IFJlZCBIYXQgUHJvY2VzcyBBdXRvbWF0aW9uIE1hbmFnZXIgKEFQQikKYmluZGFibGU6IGZhbHNlCmFzeW5jOiB1bnN1cHBvcnRlZAptZXRhZGF0YToKICBkaXNwbGF5TmFtZTogUmVkIEhhdCBQcm9jZXNzIEF1dG9tYXRpb24gTWFuYWdlciAoQVBCKQogIGRvY3VtZW50YXRpb25Vcmw6IGh0dHBzOi8vZGV2ZWxvcGVycy5yZWRoYXQuY29tL3Byb2R1Y3RzL2JwbXN1aXRlL2RvY3MtYW5kLWFwaXMvCiAgbG9uZ0Rlc2NyaXB0aW9uOgogICAgQXMgYSBzeXN0ZW0gZW5naW5lZXIsIHlvdSBjYW4gZGVwbG95IGEgUmVkIEhhdCBQcm9jZXNzIEF1dG9tYXRpb24gTWFuYWdlcgogICAgZW52aXJv\
bm1lbnQgb24gUmVkIEhhdCBPcGVuU2hpZnQgQ29udGFpbmVyIFBsYXRmb3JtIHRvIHByb3ZpZGUgYW4gaW5mcmFzdHJ1Y3R1cmUKICAgIHRvIGRldmVsb3Agb3IgZXhlY3V0ZSBwcm9jZXNzZXMgYW5kIG90aGVyIGJ1c2luZXNzIGFzc2V0cy4KCiAgICBNYWtlIHN1cmUgdGhlIHJlcXVpcmVkIEltYWdlU3RyZWFtVGFncyBleGlzdCBpbiB0aGUgb3BlbnNoaWZ0IHByb2plY3QuIFNlZSBiZWxvdyBmb3IgdGhlIHJlcXVpcmVkIGltYWdlcwogIGNvbnNvbGUub3BlbnNoaWZ0LmlvL2ljb25DbGFzczogaWNvbi1wcm9jZXNzc2VydmVyCiAgcHJvdmlkZXJEaXNwbGF5TmFtZTogIlJlZCBIYXQsIEluYy4iCiAgc2VydmljZU5hbWU6IHJocGFtCiAgZGVwZW5kZW5jaWVzOgogICAgLSAn\
cmVnaXN0cnkucmVkaGF0LmlvL3JocGFtLTcvcmhwYW03NC1raWVzZXJ2ZXItb3BlbnNoaWZ0JwogICAgLSAncmVnaXN0cnkucmVkaGF0LmlvL3JocGFtLTcvcmhwYW03NC1idXNpbmVzc2NlbnRyYWwtb3BlbnNoaWZ0JwogICAgLSAncmVnaXN0cnkucmVkaGF0LmlvL3JocGFtLTcvcmhwYW03NC1jb250cm9sbGVyLW9wZW5zaGlmdCcKICAgIC0gJ3JlZ2lzdHJ5LnJlZGhhdC5pby9yaHBhbS03L3JocGFtNzQtc21hcnRyb3V0ZXItb3BlbnNoaWZ0JwogICAgLSAncmVnaXN0cnkucmVkaGF0LmlvL3JocGFtLTcvcmhwYW03NC1idXNpbmVzc2NlbnRyYWwtbW9uaXRvcmluZy1vcGVuc2hpZnQnCiAgICAtICdyZWdpc3RyeS5yZWRoYXQuaW8vcmhzY2wvcG9zdGdyZXNxbC0xMC1yaGVs\
NycKICAgIC0gJ3JlZ2lzdHJ5LnJlZGhhdC5pby9yaHNjbC9teXNxbC01Ny1yaGVsNycKdGFnczoKICAtIGpicG0KICAtIHJocGFtCiAgLSBwcm9jZXNzc2VydmVyCiAgLSBhdXRob3JpbmcKICAtIGpib3NzCnBsYW5zOgogIC0gbmFtZTogdHJpYWwKICAgIGRlc2NyaXB0aW9uOgogICAgICBEZXBsb3kgYW4gZXBoZW1lcmFsIGVudmlyb25tZW50IGZvciB0ZXN0aW5nIEJ1c2luZXNzIENlbnRyYWwgYW5kIFByb2Nlc3MgU2VydmVyLiBBIGRlZmF1bHQgYGFkbWluVXNlcmAgdXNlciB3aWxsIGJlIGNyZWF0ZWQgd2l0aCB0aGUgYFJlZEhhdGAgcGFzc3dvcmQuCiAgICAgIEluIGNhc2UgdGhlIGdlbmVyYXRlZCByb3V0ZXMgbmVlZCB0byBiZSBvdmVycmlkZGVuLCBpdCBpcyBwb3Nz\
aWJsZSB0byBzZXQgY3VzdG9tIHJvdXRlcyBmb3IgYm90aCBhcHBsaWNhdGlvbnMuCiAgICBmcmVlOiB0cnVlCiAgICBtZXRhZGF0YToKICAgICAgZGlzcGxheU5hbWU6IEV2YWx1YXRpb24gRW52aXJvbm1lbnQKICAgIHBhcmFtZXRlcnM6CiAgICAgIC0gPDw6ICpfYXBiX2J1c2luZXNzY2VudHJhbF9ob3N0bmFtZQogICAgICAgIHRpdGxlOiBCdXNpbmVzcyBDZW50cmFsIFB1YmxpYyBIb3N0bmFtZQogICAgICAtIDw8OiAqX2FwYl9raWVzZXJ2ZXJfaG9zdG5hbWUKICAgICAgICB0aXRsZTogUHJvY2VzcyBTZXJ2ZXIgUHVibGljIEhvc3RuYW1lCiAgICAgIC0gKl9hcGJfaW1hZ2Vfc3RyZWFtX3RhZwoKICAtIG5hbWU6IGF1dGhvcmluZwogICAgZGVzY3JpcHRpb246CiAgICAg\
IEFuIGVudmlyb25tZW50IGZvciBjcmVhdGluZyBhbmQgbW9kaWZ5aW5nIHByb2Nlc3NlcyB1c2luZyBCdXNpbmVzcyBDZW50cmFsLiBJdCBjb25zaXN0cyBvZgogICAgICBwb2RzIHRoYXQgcHJvdmlkZSBCdXNpbmVzcyBDZW50cmFsIGZvciB0aGUgYXV0aG9yaW5nIHdvcmsgYW5kIGEgUHJvY2VzcyBTZXJ2ZXIgZm9yIHRlc3QgZXhlY3V0aW9uIG9mIHRoZSBwcm9jZXNzZXMuCiAgICBmcmVlOiB0cnVlCiAgICBtZXRhZGF0YToKICAgICAgZGlzcGxheU5hbWU6IEF1dGhvcmluZwogICAgcGFyYW1ldGVyczoKICAgICAgIyBDb21tb24gQ3JlZGVudGlhbHMKICAgICAgLSAqX2FwYl9raWVfYWRtaW5fdXNlcgogICAgICAtICpfYXBiX2tpZV9hZG1pbl9wd2QKICAgICAgLSAqX2Fw\
Yl9pbWFnZV9zdHJlYW1fdGFnCgogICAgICAjIEJ1c2luZXNzIENlbnRyYWwKICAgICAgLSA8PDogKl9hcGJfdm9sdW1lX3NpemUKICAgICAgICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX3ZvbHVtZV9zaXplCiAgICAgICAgZGVzY3JpcHRpb246IFNwZWNpZnkgdGhlIFBlcnNpc3RlbnQgVm9sdW1lIENsYWltIHNpemUgdG8gY3JlYXRlIGZvciBzdG9yaW5nIHRoZSBXb3Jrc3BhY2UuIEZvciBleGFtcGxlLCAxR2kKICAgICAgICBkZWZhdWx0OiAxR2kKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsCiAgICAgICMgS2V5c3RvcmUgYW5kIFNlY3JldAogICAgICAtIDw8OiAqX2FwYl9idXNpbmVzc2NlbnRyYWxfc2VjcmV0X25hbWUKICAgICAgICBkaXNw\
bGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsCiAgICAgIC0gPDw6ICpfYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9uYW1lCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbAogICAgICAtIDw8OiAqX2FwYl9idXNpbmVzc2NlbnRyYWxfa2V5c3RvcmVfYWxpYXMKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsCiAgICAgIC0gPDw6ICpfYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9wd2QKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsCiAgICAgICMgSG9zdG5hbWUKICAgICAgLSA8PDogKl9hcGJfYnVzaW5lc3NjZW50cmFsX2hvc3RuYW1lCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3Mg\
Q2VudHJhbAogICAgICAjIE9DUCBFbmFibGVtZW50CiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl9nbG9iYWxfZGlzY292ZXJ5CiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl9wcmVmZXJfa2llc2VydmVyX3N2YwogICAgICAtICpfYXBiX2NvbnRyb2xsZXJfdGVtcGxhdGVfY2FjaGVfdHRsCiAgICAgICMgR2l0IGhvb2tzCiAgICAgIC0gKl9hcGJfZ2l0X2hvb2tzX2RpcgogICAgICAjIE90aGVyIHVzZXJzCiAgICAgIC0gPDw6ICpfYXBiX2NvbnRyb2xsZXJfdXNlcgogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwKICAgICAgLSA8PDogKl9hcGJfY29udHJvbGxlcl9wd2QKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsCiAgICAgIC0g\
Kl9hcGJfYnVzaW5lc3NjZW50cmFsX21hdmVuX3JlcG9fdXNlcgogICAgICAtICpfYXBiX2J1c2luZXNzY2VudHJhbF9tYXZlbl9yZXBvX3B3ZAoKICAgICAgIyBQcm9jZXNzIFNlcnZlcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9tb2RlCgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9kYl90eXBlCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2RiX3NpemUKCiAgICAgICMgS2V5c3RvcmUgYW5kIFNlY3JldAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9zZWNyZXRfbmFtZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9uYW1lCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2tleXN0b3JlX2FsaWFzCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2tleXN0b3JlX3B3ZAoKICAg\
ICAgLSAqX2FwYl9raWVzZXJ2ZXJfdXNlcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9wd2QKICAgICAgLSA8PDogKl9hcGJfa2llc2VydmVyX2hvc3RuYW1lCiAgICAgICAgZGlzcGxheV9ncm91cDogUHJvY2VzcyBTZXJ2ZXIKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfc3RhcnR1cF9zdHJhdGVneQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9pbWFnZV9zdHJlYW1fbmFtZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9wcm9tZXRoZXVzX2V4dF9kaXNhYmxlZAoKICAgICAgIyBFeHRlcm5hbCBEYXRhYmFzZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9kcml2ZXIKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfZGlhbGVjdAogICAgICAtICpf\
YXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9ob3N0CiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX3BvcnQKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfbmFtZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl91cmwKCiAgICAgICMgSk1TCiAgICAgIC0gKl9hcGJfZW5hYmxlX2tpZXNlcnZlcl9qbXNfaW50ZWdyYXRpb24KICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX2V4ZWN1dG9yCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ptc19xdWV1ZV9leGVjdXRvcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfZXhlY3V0b3JfdHJhbnNhY3RlZAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfcmVxdWVzdAog\
ICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfcmVzcG9uc2UKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX2VuYWJsZV9zaWduYWwKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX3F1ZXVlX3NpZ25hbAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfZW5hYmxlX2F1ZGl0CiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ptc19xdWV1ZV9hdWRpdAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfYXVkaXRfdHJhbnNhY3RlZAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfdXNlcm5hbWUKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX3Bhc3N3b3JkCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ptc19hbXFfcXVldWVzCgogICAgICAjIE1hdmVuCiAgICAg\
IC0gKl9hcGJfbWF2ZW5fbWlycm9yX3VybAogICAgICAtICpfYXBiX21hdmVuX3JlcG9fdXJsCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb19pZAogICAgICAtICpfYXBiX21hdmVuX3JlcG9fdXNlcgogICAgICAtICpfYXBiX21hdmVuX3JlcG9fcHdkCgogICAgICAjIFJIIC0gU1NPCiAgICAgIC0gKl9hcGJfc3NvX3VybAogICAgICAtICpfYXBiX3Nzb19yZWFsbQogICAgICAtIDw8OiAqX2FwYl9zc29fY2xpZW50CiAgICAgICAgbmFtZTogYXBiX3Nzb19idXNpbmVzc2NlbnRyYWxfY2xpZW50CiAgICAgICAgdGl0bGU6IFJILVNTTyBCdXNpbmVzcyBDZW50cmFsIC0gQ2xpZW50CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IG5hbWUg\
Zm9yIEJ1c2luZXNzIENlbnRyYWwuIElmIHRoZSBzZWNyZXQsIHVzZXIgYW5kIHBhc3N3b3JkIGFyZSBwcm92aWRlZCBpdCB3aWxsIGJlIGNyZWF0ZWQuIEZvciBleGFtcGxlLCBidXNpbmVzc2NlbnRyYWwKICAgICAgLSA8PDogKl9hcGJfc3NvX2NsaWVudF9zZWNyZXQKICAgICAgICBuYW1lOiBhcGJfc3NvX2J1c2luZXNzY2VudHJhbF9jbGllbnRfc2VjcmV0CiAgICAgICAgdGl0bGU6IFJILVNTTyBCdXNpbmVzcyBDZW50cmFsIC0gQ2xpZW50IFNlY3JldAogICAgICAgIGRlc2NyaXB0aW9uOiBSZWQgSGF0IFNpbmdsZSBTaWduLU9uIENsaWVudCBzZWNyZXQgZm9yIEJ1c2luZXNzIENlbnRyYWwuCiAgICAgIC0gPDw6ICpfYXBiX3Nzb19jbGllbnQKICAgICAgICBuYW1lOiBh\
cGJfa2llc2VydmVyX3Nzb19jbGllbnQKICAgICAgICB0aXRsZTogUkgtU1NPIFByb2Nlc3MgU2VydmVyIC0gQ2xpZW50CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IG5hbWUgZm9yIFByb2Nlc3MgU2VydmVyLiBJZiB0aGUgc2VjcmV0LCB1c2VyIGFuZCBwYXNzd29yZCBhcmUgcHJvdmlkZWQgaXQgd2lsbCBiZSBjcmVhdGVkLiBGb3IgZXhhbXBsZSwga2llc2VydmVyCiAgICAgIC0gPDw6ICpfYXBiX3Nzb19jbGllbnRfc2VjcmV0CiAgICAgICAgbmFtZTogYXBiX2tpZXNlcnZlcl9zc29fY2xpZW50X3NlY3JldAogICAgICAgIHRpdGxlOiBSSC1TU08gUHJvY2VzcyBTZXJ2ZXIgLSBDbGllbnQgU2VjcmV0CiAgICAgICAgZGVzY3Jp\
cHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IHNlY3JldCBmb3IgUHJvY2VzcyBTZXJ2ZXIuCiAgICAgIC0gKl9hcGJfc3NvX3VzZXIKICAgICAgLSAqX2FwYl9zc29fcHdkCiAgICAgIC0gKl9hcGJfc3NvX2Rpc2FibGVfc3NsX2NlcnRfdmFsaWRhdGlvbgogICAgICAtICpfYXBiX3Nzb19wcmluY2lwYWxfYXR0cmlidXRlCgogICAgICAjIExEQVAKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfdXJsCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2JpbmRfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmluZF9jcmVkZW50aWFsCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2phYXNfc2VjdXJpdHlfZG9tYWluCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Jhc2VfY3R4\
X2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Jhc2VfZmlsdGVyCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3NlYXJjaF9zY29wZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF9zZWFyY2hfdGltZV9saW1pdAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9kaXN0aW5ndWlzaGVkX25hbWVfYXR0cmlidXRlCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3BhcnNlX3VzZXJuYW1lCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3VzZXJuYW1lX2JlZ2luX3N0cmluZwogICAgICAtICpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9lbmRfc3RyaW5nCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lkCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVzX2N0eF9kbgogICAg\
ICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX2ZpbHRlcgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX3JlY3Vyc2lvbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9kZWZhdWx0X3JvbGUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9uYW1lX2F0dHJpYnV0ZV9pZAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9wYXJzZV9yb2xlX25hbWVfZnJvbV9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX2F0dHJpYnV0ZV9pc19kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yZWZlcnJhbF91c2VyX2F0dHJpYnV0ZV9pZF90b19jaGVjawoKICAgICAgIyBSb2xlTWFwcGluZwogICAgICAtICpfYXBiX2F1dGhfcm9sZV9tYXBwZXJfcm9sZXNfcHJvcGVydGllcwogICAgICAt\
ICpfYXBiX2F1dGhfcm9sZV9tYXBwZXJfcmVwbGFjZV9yb2xlCgogIC0gbmFtZTogaW1tdXRhYmxlLWtpZQogICAgZGVzY3JpcHRpb246CiAgICAgIEluIHRoaXMgZW52aXJvbm1lbnQsIHdoZW4geW91IGRlcGxveSBhIFByb2Nlc3MgU2VydmVyIHBvZCwgaXQgYnVpbGRzIGFuIGltYWdlIHRoYXQgbG9hZHMgYW5kIHN0YXJ0cwogICAgICBhIHByb2Nlc3Mgb3IgZ3JvdXAgb2YgcHJvY2Vzc2VzLiBZb3UgY2Fubm90IHN0b3AgYW55IHByb2Nlc3Mgb24gdGhlIHBvZCBvciBhZGQgYW55IG5ldyBwcm9jZXNzIHRvIHRoZSBwb2QuCiAgICAgIElmIHlvdSB3YW50IHRvIHVzZSBhbm90aGVyIHZlcnNpb24gb2YgYSBwcm9jZXNzIG9yIG1vZGlmeSB0aGUgY29uZmlndXJhdGlvbiBpbiBh\
bnkgb3RoZXIgd2F5LCB5b3UgZGVwbG95IGEgbmV3CiAgICAgIHNlcnZlciBpbWFnZSBhbmQgZGlzcGxhY2UgdGhlIG9sZCBvbmUuCiAgICBmcmVlOiB0cnVlCiAgICBtZXRhZGF0YToKICAgICAgZGlzcGxheU5hbWU6IEltbXV0YWJsZSBTZXJ2ZXIgLSBQcm9jZXNzIFNlcnZlcgogICAgcGFyYW1ldGVyczoKICAgICAgIyBDb21tb24gQ3JlZGVudGlhbHMKICAgICAgLSAqX2FwYl9raWVfYWRtaW5fdXNlcgogICAgICAtICpfYXBiX2tpZV9hZG1pbl9wd2QKICAgICAgLSAqX2FwYl9pbWFnZV9zdHJlYW1fdGFnCiAgICAgICMgSEEKICAgICAgLSA8PDogKl9hcGJfcmVwbGljYXMKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX3JlcGxpY2FzCiAgICAgICAgZGVzY3JpcHRpb246\
IE51bWJlciBvZiBSZXBsaWNhcyBvZiB0aGUgUHJvY2VzcyBTZXJ2ZXIgdGhhdCB3aWxsIGJlIGluaXRpYWxseSBkZXBsb3llZAogICAgICAgIGRlZmF1bHQ6IDIKCiAgICAgICMgQXJ0aWZhY3QgU291cmNlCiAgICAgIC0gbmFtZTogYXBiX2tpZXNlcnZlcl9jb250YWluZXJfZGVwbG95bWVudAogICAgICAgIHRpdGxlOiBQcm9jZXNzIFNlcnZlciBDb250YWluZXIgRGVwbG95bWVudAogICAgICAgIGRlc2NyaXB0aW9uOiAnUHJvY2VzcyBTZXJ2ZXIgQ29udGFpbmVyIGRlcGxveW1lbnQgY29uZmlndXJhdGlvbiBpbiBmb3JtYXQ6IGNvbnRhaW5lcklkPWdyb3VwSWQ6YXJ0aWZhY3RJZDp2ZXJzaW9ufGMyPWcyOmEyOnYyJwogICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICAgICAg\
dHlwZTogc3RyaW5nCiAgICAgICAgZGlzcGxheV9ncm91cDogQXJ0aWZhY3Qgc291cmNlCiAgICAgIC0gbmFtZTogYXBiX2tpZXNlcnZlcl9zb3VyY2VfdXJsCiAgICAgICAgdGl0bGU6IEdpdCBSZXBvc2l0b3J5IFVSTAogICAgICAgIGRlc2NyaXB0aW9uOiBHaXQgc291cmNlIFVSSSBmb3IgYXBwbGljYXRpb24uIEZvciBleGFtcGxlLCBodHRwczovL2dpdGh1Yi5jb20vamJvc3MtY29udGFpbmVyLWltYWdlcy9yaHBhbS03LW9wZW5zaGlmdC1pbWFnZS5naXQKICAgICAgICByZXF1aXJlZDogdHJ1ZQogICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEFydGlmYWN0IHNvdXJjZQogICAgICAtIG5hbWU6IGFwYl9raWVzZXJ2ZXJfc291cmNlX3JlZgog\
ICAgICAgIHRpdGxlOiBHaXQgUmVwb3NpdG9yeSBSZWZlcmVuY2UKICAgICAgICBkZXNjcmlwdGlvbjogR2l0IGJyYW5jaC90YWcgcmVmZXJlbmNlLiBGb3IgZXhhbXBsZSwgNy40LjAuR0Egb3IgbWFzdGVyCiAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBkaXNwbGF5X2dyb3VwOiBBcnRpZmFjdCBzb3VyY2UKICAgICAgLSBuYW1lOiBhcGJfa2llc2VydmVyX3NvdXJjZV9jb250ZXh0CiAgICAgICAgdGl0bGU6IEdpdCBSZXBvc2l0b3J5IENvbnRleHQgRGlyCiAgICAgICAgZGVzY3JpcHRpb246IFBhdGggd2l0aGluIEdpdCBwcm9qZWN0IHRvIGJ1aWxkOyBlbXB0eSBmb3Igcm9vdCBwcm9qZWN0IGRpcmVjdG9yeS4gRm9yIGV4YW1w\
bGUsIHF1aWNrc3RhcnRzL2xpYnJhcnktcHJvY2Vzcy9saWJyYXJ5CiAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZGlzcGxheV9ncm91cDogQXJ0aWZhY3Qgc291cmNlCiAgICAgIC0gbmFtZTogYXBiX2tpZXNlcnZlcl9naXRodWJfd2ViaG9va19zZWNyZXQKICAgICAgICB0aXRsZTogR2l0aHViIFdlYmhvb2sgU2VjcmV0CiAgICAgICAgZGVzY3JpcHRpb246IFNlY3JldCBrZXkgdG8gdXNlIHdoZW4gY29uZmlndXJpbmcgYSBHaXRIdWIgV2ViaG9vay4gR2VuZXJhdGVkIGlmIGVtcHR5LgogICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEFydGlmYWN0IHNvdXJjZQogICAgICAtIG5hbWU6IGFwYl9raWVzZXJ2ZXJfZ2VuZXJpY193ZWJob29r\
X3NlY3JldAogICAgICAgIHRpdGxlOiBHZW5lcmljIFdlYmhvb2sgU2VjcmV0CiAgICAgICAgZGVzY3JpcHRpb246IFNlY3JldCBrZXkgdG8gdXNlIHdoZW4gY29uZmlndXJpbmcgYSBHZW5lcmljIFdlYmhvb2suIEdlbmVyYXRlZCBpZiBlbXB0eS4KICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBkaXNwbGF5X2dyb3VwOiBBcnRpZmFjdCBzb3VyY2UKICAgICAgLSBuYW1lOiBhcGJfa2llc2VydmVyX2FydGlmYWN0X2RpcgogICAgICAgIHRpdGxlOiBBcnRpZmFjdCBkaXJlY3RvcmllcwogICAgICAgIGRlc2NyaXB0aW9uOiBMaXN0IG9mIGRpcmVjdG9yaWVzIGZyb20gd2hpY2ggYXJjaGl2ZXMgd2lsbCBiZSBjb3BpZWQgaW50byB0aGUgZGVwbG95bWVudCBmb2xkZXIuIElm\
IHVuc3BlY2lmaWVkLCBhbGwgYXJjaGl2ZXMgaW4gL3RhcmdldCB3aWxsIGJlIGNvcGllZC4KICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBkaXNwbGF5X2dyb3VwOiBBcnRpZmFjdCBzb3VyY2UKICAgICAgLSA8PDogKl9hcGJfbWF2ZW5fbWlycm9yX3VybAogICAgICAgIGRlc2NyaXB0aW9uOiBNYXZlbiBNaXJyb3IgdG8gdXNlIGZvciBTMkkgYnVpbGRzCiAgICAgICAgZGlzcGxheV9ncm91cDogQXJ0aWZhY3Qgc291cmNlCgogICAgICAjIE1hdmVuCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb191cmwKICAgICAgLSAqX2FwYl9tYXZlbl9yZXBvX2lkCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb191c2VyCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb19wd2QKCiAgICAgICMg\
Sk1TCiAgICAgIC0gKl9hcGJfZW5hYmxlX2tpZXNlcnZlcl9qbXNfaW50ZWdyYXRpb24KICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX2V4ZWN1dG9yCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ptc19xdWV1ZV9leGVjdXRvcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfZXhlY3V0b3JfdHJhbnNhY3RlZAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfcmVxdWVzdAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfcmVzcG9uc2UKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX2VuYWJsZV9zaWduYWwKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX3F1ZXVlX3NpZ25hbAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfZW5hYmxlX2F1\
ZGl0CiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ptc19xdWV1ZV9hdWRpdAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfYXVkaXRfdHJhbnNhY3RlZAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfdXNlcm5hbWUKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX3Bhc3N3b3JkCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ptc19hbXFfcXVldWVzCgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9tb2RlCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2RiX3R5cGUKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZGJfc2l6ZQogICAgICAjIEtleXN0b3JlIGFuZCBTZWNyZXQKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfc2VjcmV0X25hbWUKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJf\
a2V5c3RvcmVfbmFtZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9hbGlhcwogICAgICAtICpfYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9wd2QKCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX3VzZXIKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfcHdkCiAgICAgIC0gPDw6ICpfYXBiX2tpZXNlcnZlcl9ob3N0bmFtZQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCiAgICAgIC0gPDw6ICpfYXBiX2tpZXNlcnZlcl9zdGFydHVwX3N0cmF0ZWd5CiAgICAgICAgZGVzY3JpcHRpb246ICJXaGVuIHNldCB0byBPcGVuU2hpZnRTdGFydHVwU3RyYXRlZ3ksIGFsbG93cyBLSUUgc2VydmVyIHRvIHN0YXJ0IHVwIGluZGVwZW5kZW50bHkgdXNpbmcgc2hhcmVk\
IHN0YXRlIGZyb20gT3BlblNoaWZ0IEFQSSBzZXJ2aWNlOyB3aGVuIHNldCB0byBMb2NhbENvbnRhaW5lcnNTdGFydHVwU3RyYXRlZ3ksIGFsbG93cyBLSUUgc2VydmVyIHRvIHN0YXJ0IHVwIGFuZCBmdW5jdGlvbiB3aXRoIGxvY2FsIGNvbmZpZ3VyYXRpb24sIGV2ZW4gd2hlbiBhIGNvbnRyb2xsZXIgaXMgY29uZmlndXJlZCBhbmQgdW5hdmFpbGFibGUuIERlZmF1bHQ6IE9wZW5TaGlmdFN0YXJ0dXBTdHJhdGVneSIKICAgICAgICBlbnVtOiBbJ09wZW5TaGlmdFN0YXJ0dXBTdHJhdGVneScsICdMb2NhbENvbnRhaW5lcnNTdGFydHVwU3RyYXRlZ3knXQogICAgICAgIGRlZmF1bHQ6IE9wZW5TaGlmdFN0YXJ0dXBTdHJhdGVneQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9pbWFn\
ZV9zdHJlYW1fbmFtZQogICAgICAgICMgUHJvbWV0aGV1cwogICAgICAtICpfYXBiX2tpZXNlcnZlcl9wcm9tZXRoZXVzX2V4dF9kaXNhYmxlZAoKICAgICAgIyBFeHRlcm5hbCBEYXRhYmFzZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9kcml2ZXIKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfZGlhbGVjdAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9ob3N0CiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX3BvcnQKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfbmFtZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl91cmwKCiAgICAgICMgUm91dGVyCiAgICAgIC0g\
Kl9hcGJfcm91dGVyX3N2YwogICAgICAtICpfYXBiX3JvdXRlcl9ob3N0CiAgICAgIC0gKl9hcGJfcm91dGVyX3BvcnQKICAgICAgLSAqX2FwYl9yb3V0ZXJfcHJvdG9jb2wKCiAgICAgICMgQ29udHJvbGxlcgogICAgICAtICpfYXBiX2NvbnRyb2xsZXJfc3ZjCiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl9ob3N0CiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl9wb3J0CiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl9wcm90b2NvbAogICAgICAtICpfYXBiX2NvbnRyb2xsZXJfdG9rZW4KICAgICAgLSA8PDogKl9hcGJfY29udHJvbGxlcl91c2VyCiAgICAgICAgZGlzcGxheV9ncm91cDogQ29udHJvbGxlciBJbnRlZ3JhdGlvbgogICAgICAtIDw8OiAqX2FwYl9jb250cm9sbGVyX3B3\
ZAogICAgICAgIGRpc3BsYXlfZ3JvdXA6IENvbnRyb2xsZXIgSW50ZWdyYXRpb24KCiAgICAgICMgUkggLSBTU08KICAgICAgLSAqX2FwYl9zc29fdXJsCiAgICAgIC0gKl9hcGJfc3NvX3JlYWxtCiAgICAgIC0gPDw6ICpfYXBiX3Nzb19jbGllbnQKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX3Nzb19jbGllbnQKICAgICAgICB0aXRsZTogUkgtU1NPIFByb2Nlc3MgU2VydmVyIC0gQ2xpZW50CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IG5hbWUgZm9yIFByb2Nlc3MgU2VydmVyLiBJZiB0aGUgc2VjcmV0LCB1c2VyIGFuZCBwYXNzd29yZCBhcmUgcHJvdmlkZWQgaXQgd2lsbCBiZSBjcmVhdGVkLiBGb3IgZXhhbXBsZSwga2ll\
c2VydmVyCiAgICAgIC0gPDw6ICpfYXBiX3Nzb19jbGllbnRfc2VjcmV0CiAgICAgICAgbmFtZTogYXBiX2tpZXNlcnZlcl9zc29fY2xpZW50X3NlY3JldAogICAgICAgIHRpdGxlOiBSSC1TU08gUHJvY2VzcyBTZXJ2ZXIgLSBDbGllbnQgU2VjcmV0CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IHNlY3JldCBmb3IgUHJvY2VzcyBTZXJ2ZXIuCiAgICAgIC0gKl9hcGJfc3NvX3VzZXIKICAgICAgLSAqX2FwYl9zc29fcHdkCiAgICAgIC0gKl9hcGJfc3NvX2Rpc2FibGVfc3NsX2NlcnRfdmFsaWRhdGlvbgogICAgICAtICpfYXBiX3Nzb19wcmluY2lwYWxfYXR0cmlidXRlCgogICAgICAjIExEQVAKICAgICAgLSAqX2FwYl9hdXRoX2xk\
YXBfdXJsCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2JpbmRfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmluZF9jcmVkZW50aWFsCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2phYXNfc2VjdXJpdHlfZG9tYWluCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Jhc2VfY3R4X2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Jhc2VfZmlsdGVyCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3NlYXJjaF9zY29wZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF9zZWFyY2hfdGltZV9saW1pdAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9kaXN0aW5ndWlzaGVkX25hbWVfYXR0cmlidXRlCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3BhcnNlX3VzZXJuYW1lCiAgICAgIC0gKl9hcGJfYXV0\
aF9sZGFwX3VzZXJuYW1lX2JlZ2luX3N0cmluZwogICAgICAtICpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9lbmRfc3RyaW5nCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lkCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVzX2N0eF9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX2ZpbHRlcgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX3JlY3Vyc2lvbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9kZWZhdWx0X3JvbGUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9uYW1lX2F0dHJpYnV0ZV9pZAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9wYXJzZV9yb2xlX25hbWVfZnJvbV9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9y\
b2xlX2F0dHJpYnV0ZV9pc19kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yZWZlcnJhbF91c2VyX2F0dHJpYnV0ZV9pZF90b19jaGVjawoKICAgICAgIyBSb2xlTWFwcGluZwogICAgICAtICpfYXBiX2F1dGhfcm9sZV9tYXBwZXJfcm9sZXNfcHJvcGVydGllcwogICAgICAtICpfYXBiX2F1dGhfcm9sZV9tYXBwZXJfcmVwbGFjZV9yb2xlCgogIC0gbmFtZTogaW1tdXRhYmxlLW1vbgogICAgZGVzY3JpcHRpb246CiAgICAgIFVzZSBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcgdG8gbW9uaXRvciB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGVudmlyb25tZW50IGFuZCB0byBzdG9wIGFuZAogICAgICByZXN0YXJ0IHNvbWUgb2YgdGhlIHByb2Nlc3MgaW5zdGFuY2VzIGluIGFu\
IGltbXV0YWJsZSBlbnZpcm9ubWVudCwgYnV0IG5vdCB0byBkZXBsb3kgYWRkaXRpb25hbCBwcm9jZXNzZXMgdG8gYW55IFByb2Nlc3MgU2VydmVyIG9yIHVuZGVwbG95IGFueSBleGlzdGluZyBvbmVzICh5b3UgY2FuIG5vdCBhZGQgb3IgcmVtb3ZlIGNvbnRhaW5lcnMpCiAgICBmcmVlOiB0cnVlCiAgICBtZXRhZGF0YToKICAgICAgZGlzcGxheU5hbWU6IEltbXV0YWJsZSBTZXJ2ZXIgLSBNb25pdG9yCiAgICBwYXJhbWV0ZXJzOgogICAgICAjIENvbW1vbiBDcmVkZW50aWFscwogICAgICAtICpfYXBiX2tpZV9hZG1pbl91c2VyCiAgICAgIC0gKl9hcGJfa2llX2FkbWluX3B3ZAogICAgICAtICpfYXBiX2ltYWdlX3N0cmVhbV90YWcKCiAgICAgICMgTWF2ZW4KICAgICAgLSAq\
X2FwYl9tYXZlbl9taXJyb3JfdXJsCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb191cmwKICAgICAgLSAqX2FwYl9tYXZlbl9yZXBvX2lkCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb191c2VyCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb19wd2QKCiAgICAgICMgQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgIC0gPDw6ICpfYXBiX3JlcGxpY2FzCiAgICAgICAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9yZXBsaWNhcwogICAgICAgIGRlc2NyaXB0aW9uOiBOdW1iZXIgb2YgUmVwbGljYXMgb2YgQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nIHRoYXQgd2lsbCBiZSBpbml0aWFsbHkgZGVwbG95ZWQKICAgICAgICBkZWZhdWx0OiAxCiAgICAgICAgZGlzcGxheV9n\
cm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgIC0gPDw6ICpfYXBiX3ZvbHVtZV9zaXplCiAgICAgICAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF92b2x1bWVfc2l6ZQogICAgICAgIGRlc2NyaXB0aW9uOiBTcGVjaWZ5IHRoZSBQZXJzaXN0ZW50IFZvbHVtZSBDbGFpbSBzaXplIHRvIGNyZWF0ZSBmb3Igc3RvcmluZyB0aGUgdXNlciBkYXRhLiBGb3IgZXhhbXBsZSwgNjRNaQogICAgICAgIGRlZmF1bHQ6IDY0TWkKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKICAgICAgIyBLZXlzdG9yZSBhbmQgU2VjcmV0CiAgICAgIC0gKl9hcGJfYnVzaW5lc3NjZW50cmFsX3NlY3JldF9uYW1lCiAgICAgIC0gKl9hcGJf\
YnVzaW5lc3NjZW50cmFsX2tleXN0b3JlX25hbWUKICAgICAgLSAqX2FwYl9idXNpbmVzc2NlbnRyYWxfa2V5c3RvcmVfYWxpYXMKICAgICAgLSAqX2FwYl9idXNpbmVzc2NlbnRyYWxfa2V5c3RvcmVfcHdkCiAgICAgIC0gPDw6ICpfYXBiX2J1c2luZXNzY2VudHJhbF9ob3N0bmFtZQogICAgICAgIGRlc2NyaXB0aW9uOiBQdWJsaWMgaG9zdG5hbWUgZm9yIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZy4gR2VuZXJhdGVkIGlmIGVtcHR5CiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgICMgT0NQIEVuYWJsZW1lbnQKICAgICAgLSAqX2FwYl9jb250cm9sbGVyX2dsb2JhbF9kaXNjb3ZlcnkKICAgICAgLSAqX2FwYl9jb250\
cm9sbGVyX3ByZWZlcl9raWVzZXJ2ZXJfc3ZjCiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl90ZW1wbGF0ZV9jYWNoZV90dGwKICAgICAgIyBPdGhlciB1c2VycwogICAgICAtIDw8OiAqX2FwYl9jb250cm9sbGVyX3VzZXIKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKICAgICAgLSA8PDogKl9hcGJfY29udHJvbGxlcl9wd2QKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKCiAgICAgICMgU21hcnQgUm91dGVyCiAgICAgIC0gKl9hcGJfc21hcnRyb3V0ZXJfcHJvdG9jb2wKICAgICAgLSAqX2FwYl9zbWFydHJvdXRlcl91c2VfZXh0ZXJuYWxfcm91dGUKICAgICAgLSA8PDogKl9hcGJfcmVw\
bGljYXMKICAgICAgICBuYW1lOiBhcGJfc21hcnRyb3V0ZXJfcmVwbGljYXMKICAgICAgICBkZXNjcmlwdGlvbjogTnVtYmVyIG9mIFJlcGxpY2FzIG9mIFNtYXJ0IFJvdXRlciB0aGF0IHdpbGwgYmUgaW5pdGlhbGx5IGRlcGxveWVkCiAgICAgICAgZGVmYXVsdDogMgogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFNtYXJ0IFJvdXRlcgogICAgICAtIDw8OiAqX2FwYl92b2x1bWVfc2l6ZQogICAgICAgIG5hbWU6IGFwYl9zbWFydHJvdXRlcl92b2x1bWVfc2l6ZQogICAgICAgIGRlc2NyaXB0aW9uOiBTcGVjaWZ5IHRoZSBQZXJzaXN0ZW50IFZvbHVtZSBDbGFpbSBzaXplIHRvIGNyZWF0ZS4gRm9yIGV4YW1wbGUsIDY0TWkKICAgICAgICBkZWZhdWx0OiA2NE1pCiAgICAgICAgZGlz\
cGxheV9ncm91cDogU21hcnQgUm91dGVyCiAgICAgIC0gPDw6ICpfYXBiX2hvc3RuYW1lCiAgICAgICAgbmFtZTogYXBiX3NtYXJ0cm91dGVyX2hvc3RuYW1lCiAgICAgICAgZGVzY3JpcHRpb246IFB1YmxpYyBob3N0bmFtZSBmb3IgU21hcnQgUm91dGVyLiBHZW5lcmF0ZWQgaWYgZW1wdHkKICAgICAgICBkaXNwbGF5X2dyb3VwOiBTbWFydCBSb3V0ZXIKICAgICAgLSA8PDogKl9hcGJfc2VjcmV0X25hbWUKICAgICAgICBuYW1lOiBhcGJfc21hcnRyb3V0ZXJfc2VjcmV0X25hbWUKICAgICAgICBkaXNwbGF5X2dyb3VwOiBTbWFydCBSb3V0ZXIKICAgICAgLSA8PDogKl9hcGJfa2V5c3RvcmVfbmFtZQogICAgICAgIG5hbWU6IGFwYl9zbWFydHJvdXRlcl9rZXlzdG9yZV9uYW1l\
CiAgICAgICAgZGlzcGxheV9ncm91cDogU21hcnQgUm91dGVyCiAgICAgIC0gPDw6ICpfYXBiX2tleXN0b3JlX2FsaWFzCiAgICAgICAgbmFtZTogYXBiX3NtYXJ0cm91dGVyX2tleXN0b3JlX2FsaWFzCiAgICAgICAgZGlzcGxheV9ncm91cDogU21hcnQgUm91dGVyCiAgICAgIC0gPDw6ICpfYXBiX2tleXN0b3JlX3B3ZAogICAgICAgIG5hbWU6IGFwYl9zbWFydHJvdXRlcl9rZXlzdG9yZV9wd2QKICAgICAgICBkaXNwbGF5X2dyb3VwOiBTbWFydCBSb3V0ZXIKCiAgICAgICMgUkggLSBTU08KICAgICAgLSAqX2FwYl9zc29fdXJsCiAgICAgIC0gKl9hcGJfc3NvX3JlYWxtCiAgICAgIC0gPDw6ICpfYXBiX3Nzb19jbGllbnQKICAgICAgICBuYW1lOiBhcGJfc3NvX2J1c2luZXNz\
Y2VudHJhbF9jbGllbnQKICAgICAgICB0aXRsZTogUkgtU1NPIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZyAtIENsaWVudAogICAgICAgIGRlc2NyaXB0aW9uOiBSZWQgSGF0IFNpbmdsZSBTaWduLU9uIENsaWVudCBuYW1lIGZvciBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcuIElmIHRoZSBzZWNyZXQsIHVzZXIgYW5kIHBhc3N3b3JkIGFyZSBwcm92aWRlZCBpdCB3aWxsIGJlIGNyZWF0ZWQuIEZvciBleGFtcGxlLCBidXNpbmVzc2NlbnRyYWwKICAgICAgLSA8PDogKl9hcGJfc3NvX2NsaWVudF9zZWNyZXQKICAgICAgICBuYW1lOiBhcGJfc3NvX2J1c2luZXNzY2VudHJhbF9jbGllbnRfc2VjcmV0CiAgICAgICAgdGl0bGU6IFJILVNTTyBCdXNpbmVzcyBDZW50cmFs\
IE1vbml0b3JpbmcgLSBDbGllbnQgU2VjcmV0CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IHNlY3JldCBmb3IgQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nLgogICAgICAtICpfYXBiX3Nzb191c2VyCiAgICAgIC0gKl9hcGJfc3NvX3B3ZAogICAgICAtICpfYXBiX3Nzb19kaXNhYmxlX3NzbF9jZXJ0X3ZhbGlkYXRpb24KICAgICAgLSAqX2FwYl9zc29fcHJpbmNpcGFsX2F0dHJpYnV0ZQoKICAgICAgIyBMREFQCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3VybAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9iaW5kX2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2JpbmRfY3JlZGVudGlhbAogICAgICAtICpfYXBiX2F1dGhfbGRh\
cF9qYWFzX3NlY3VyaXR5X2RvbWFpbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9iYXNlX2N0eF9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9iYXNlX2ZpbHRlcgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9zZWFyY2hfc2NvcGUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfc2VhcmNoX3RpbWVfbGltaXQKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfZGlzdGluZ3Vpc2hlZF9uYW1lX2F0dHJpYnV0ZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF9wYXJzZV91c2VybmFtZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9iZWdpbl9zdHJpbmcKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfdXNlcm5hbWVfZW5kX3N0cmluZwogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xl\
X2F0dHJpYnV0ZV9pZAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlc19jdHhfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9maWx0ZXIKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9yZWN1cnNpb24KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfZGVmYXVsdF9yb2xlCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfbmFtZV9hdHRyaWJ1dGVfaWQKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcGFyc2Vfcm9sZV9uYW1lX2Zyb21fZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9hdHRyaWJ1dGVfaXNfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcmVmZXJyYWxfdXNlcl9hdHRyaWJ1dGVfaWRfdG9fY2hlY2sKCiAgICAgICMgUm9sZU1hcHBpbmcK\
ICAgICAgLSAqX2FwYl9hdXRoX3JvbGVfbWFwcGVyX3JvbGVzX3Byb3BlcnRpZXMKICAgICAgLSAqX2FwYl9hdXRoX3JvbGVfbWFwcGVyX3JlcGxhY2Vfcm9sZQoKICAtIG5hbWU6IG1hbmFnZWQKICAgIGRlc2NyaXB0aW9uOgogICAgICBBbiBlbnZpcm9ubWVudCBmb3IgcnVubmluZyBleGlzdGluZyBwcm9jZXNzZXMgZm9yIHN0YWdpbmcgYW5kIHByb2R1Y3Rpb24gcHVycG9zZXMuCiAgICAgIFRoaXMgZW52aXJvbm1lbnQgaW5jbHVkZXMgc2V2ZXJhbCBncm91cHMgb2YgUHJvY2VzcyBTZXJ2ZXIgcG9kczsgeW91IGNhbiBkZXBsb3kgYW5kIHVuZGVwbG95CiAgICAgIHByb2Nlc3NlcyBvbiBldmVyeSBzdWNoIGdyb3VwIGFuZCBhbHNvIHNjYWxlIHRoZSBncm91cCB1cCBvciBk\
b3duIGFzIG5lY2Vzc2FyeS4gVXNlIEJ1c2luZXNzCiAgICAgIENlbnRyYWwgTW9uaXRvcmluZyB0byBkZXBsb3ksIHJ1biwgYW5kIHN0b3AgdGhlIHByb2Nlc3NlcyBhbmQgdG8gbW9uaXRvciB0aGVpciBleGVjdXRpb24uCgogICAgZnJlZTogdHJ1ZQogICAgbWV0YWRhdGE6CiAgICAgIGRpc3BsYXlOYW1lOiBNYW5hZ2VkIEVudmlyb25tZW50CiAgICBwYXJhbWV0ZXJzOgogICAgICAjIENvbW1vbiBDcmVkZW50aWFscwogICAgICAtICpfYXBiX2tpZV9hZG1pbl91c2VyCiAgICAgIC0gKl9hcGJfa2llX2FkbWluX3B3ZAogICAgICAtICpfYXBiX2ltYWdlX3N0cmVhbV90YWcKCiAgICAgICMgTWF2ZW4KICAgICAgLSAqX2FwYl9tYXZlbl9taXJyb3JfdXJsCiAgICAgIC0gPDw6\
ICpfYXBiX21hdmVuX3JlcG9fdXJsCiAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICBkZXNjcmlwdGlvbjogRXh0ZXJuYWwgTWF2ZW4gUmVwb3NpdG9yeSBVUkwuCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb19pZAogICAgICAtICpfYXBiX21hdmVuX3JlcG9fdXNlcgogICAgICAtICpfYXBiX21hdmVuX3JlcG9fcHdkCgogICAgICAjIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAtIDw8OiAqX2FwYl9yZXBsaWNhcwogICAgICAgIG5hbWU6IGFwYl9idXNpbmVzc2NlbnRyYWxfcmVwbGljYXMKICAgICAgICBkZWZhdWx0OiAxCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgIC0gPDw6ICpfYXBiX3ZvbHVt\
ZV9zaXplCiAgICAgICAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF92b2x1bWVfc2l6ZQogICAgICAgIGRlc2NyaXB0aW9uOiBTcGVjaWZ5IHRoZSBQZXJzaXN0ZW50IFZvbHVtZSBDbGFpbSBzaXplIHRvIGNyZWF0ZSBmb3Igc3RvcmluZyB0aGUgdXNlciBkYXRhLiBGb3IgZXhhbXBsZSwgNjRNaQogICAgICAgIGRlZmF1bHQ6IDY0TWkKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKICAgICAgIyMgS2V5c3RvcmUgYW5kIFNlY3JldAogICAgICAtICpfYXBiX2J1c2luZXNzY2VudHJhbF9zZWNyZXRfbmFtZQogICAgICAtICpfYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9uYW1lCiAgICAgIC0gKl9hcGJfYnVzaW5lc3NjZW50\
cmFsX2tleXN0b3JlX2FsaWFzCiAgICAgIC0gKl9hcGJfYnVzaW5lc3NjZW50cmFsX2tleXN0b3JlX3B3ZAogICAgICAtIDw8OiAqX2FwYl9idXNpbmVzc2NlbnRyYWxfaG9zdG5hbWUKICAgICAgICBkZXNjcmlwdGlvbjogUHVibGljIGhvc3RuYW1lIGZvciBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcuIEdlbmVyYXRlZCBpZiBlbXB0eQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAjIE9DUCBFbmFibGVtZW50CiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl9nbG9iYWxfZGlzY292ZXJ5CiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl9wcmVmZXJfa2llc2VydmVyX3N2YwogICAgICAtICpfYXBiX2NvbnRyb2xsZXJfdGVt\
cGxhdGVfY2FjaGVfdHRsCgogICAgICAjIE90aGVyIHVzZXJzCiAgICAgIC0gPDw6ICpfYXBiX2NvbnRyb2xsZXJfdXNlcgogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAtIDw8OiAqX2FwYl9jb250cm9sbGVyX3B3ZAogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwoKICAgICAgIyBTbWFydCBSb3V0ZXIKICAgICAgLSAqX2FwYl9zbWFydHJvdXRlcl9wcm90b2NvbAogICAgICAtICpfYXBiX3NtYXJ0cm91dGVyX3VzZV9leHRlcm5hbF9yb3V0ZQogICAgICAtIDw8OiAqX2FwYl9yZXBsaWNhcwogICAgICAgIG5hbWU6IGFwYl9zbWFydHJvdXRlcl9yZXBsaWNhcwogICAgICAgIGRl\
ZmF1bHQ6IDIKICAgICAgICBkaXNwbGF5X2dyb3VwOiBTbWFydCBSb3V0ZXIKICAgICAgLSA8PDogKl9hcGJfdm9sdW1lX3NpemUKICAgICAgICBuYW1lOiBhcGJfc21hcnRyb3V0ZXJfdm9sdW1lX3NpemUKICAgICAgICBkZXNjcmlwdGlvbjogU3BlY2lmeSB0aGUgUGVyc2lzdGVudCBWb2x1bWUgQ2xhaW0gc2l6ZSB0byBjcmVhdGUuIEZvciBleGFtcGxlLCA2NE1pCiAgICAgICAgZGVmYXVsdDogNjRNaQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFNtYXJ0IFJvdXRlcgogICAgICAtIDw8OiAqX2FwYl9ob3N0bmFtZQogICAgICAgIG5hbWU6IGFwYl9zbWFydHJvdXRlcl9ob3N0bmFtZQogICAgICAgIGRlc2NyaXB0aW9uOiBQdWJsaWMgaG9zdG5hbWUgZm9yIFNtYXJ0IFJvdXRl\
ci4gR2VuZXJhdGVkIGlmIGVtcHR5CiAgICAgICAgZGlzcGxheV9ncm91cDogU21hcnQgUm91dGVyCiAgICAgIC0gPDw6ICpfYXBiX3NlY3JldF9uYW1lCiAgICAgICAgbmFtZTogYXBiX3NtYXJ0cm91dGVyX3NlY3JldF9uYW1lCiAgICAgICAgZGlzcGxheV9ncm91cDogU21hcnQgUm91dGVyCiAgICAgIC0gPDw6ICpfYXBiX2tleXN0b3JlX25hbWUKICAgICAgICBuYW1lOiBhcGJfc21hcnRyb3V0ZXJfa2V5c3RvcmVfbmFtZQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFNtYXJ0IFJvdXRlcgogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9hbGlhcwogICAgICAgIG5hbWU6IGFwYl9zbWFydHJvdXRlcl9rZXlzdG9yZV9hbGlhcwogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFNtYXJ0\
IFJvdXRlcgogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9wd2QKICAgICAgICBuYW1lOiBhcGJfc21hcnRyb3V0ZXJfa2V5c3RvcmVfcHdkCiAgICAgICAgZGlzcGxheV9ncm91cDogU21hcnQgUm91dGVyCgogICAgICAjIFByb2Nlc3MgU2VydmVyCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX21vZGUKICAgICAgLSBuYW1lOiBhcGJfa2llc2VydmVyX3NldHMKICAgICAgICB0aXRsZTogU2V0cyBvZiBQcm9jZXNzIFNlcnZlcnMKICAgICAgICBkZXNjcmlwdGlvbjoKICAgICAgICAgIE51bWJlciBvZiBzZXRzIG9mIEtpZSBQcm9jZXNzIFNlcnZlciBjbHVzdGVyICsgZGF0YWJhc2UgdGhhdCB3aWxsIGJlIGRlcGxveWVkLgogICAgICAgICAgRWFjaCBzZXQgY2FuIHJ1biBzZXBh\
cmF0ZSBzZXJ2aWNlcyBhbmQgb3RoZXIgYXNzZXRzLiBBbGwgc2V0cyBjb25uZWN0IHRvIHRoZSBzYW1lIFNtYXJ0IFJvdXRlcgogICAgICAgIGRlZmF1bHQ6IDIKICAgICAgICByZXF1aXJlZDogdHJ1ZQogICAgICAgIHR5cGU6IG51bWJlcgogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCiAgICAgIC0gPDw6ICpfYXBiX3JlcGxpY2FzCiAgICAgICAgbmFtZTogYXBiX2tpZXNlcnZlcl9yZXBsaWNhcwogICAgICAgIGRlZmF1bHQ6IDMKICAgICAgICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9kYl90eXBlCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2RiX3NpemUKCiAgICAgICMjIEtleXN0b3JlIGFuZCBT\
ZWNyZXQKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfc2VjcmV0X25hbWUKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfa2V5c3RvcmVfbmFtZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9hbGlhcwogICAgICAtICpfYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9wd2QKCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX3VzZXIKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfcHdkCiAgICAgIC0gPDw6ICpfYXBiX2tpZXNlcnZlcl9ob3N0bmFtZQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX3N0YXJ0dXBfc3RyYXRlZ3kKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfaW1hZ2Vfc3RyZWFtX25hbWUKICAgICAgLSAqX2Fw\
Yl9raWVzZXJ2ZXJfcHJvbWV0aGV1c19leHRfZGlzYWJsZWQKCiAgICAgICMgRXh0ZXJuYWwgRGF0YWJhc2UKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfZHJpdmVyCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2RpYWxlY3QKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfaG9zdAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9wb3J0CiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX25hbWUKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfdXJsCgogICAgICAjIEpNUwogICAgICAtICpfYXBiX2VuYWJsZV9raWVzZXJ2ZXJfam1zX2ludGVncmF0aW9uCiAgICAgIC0gKl9h\
cGJfa2llc2VydmVyX2ptc19leGVjdXRvcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfZXhlY3V0b3IKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX2V4ZWN1dG9yX3RyYW5zYWN0ZWQKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX3F1ZXVlX3JlcXVlc3QKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX3F1ZXVlX3Jlc3BvbnNlCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ptc19lbmFibGVfc2lnbmFsCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ptc19xdWV1ZV9zaWduYWwKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX2VuYWJsZV9hdWRpdAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfcXVldWVfYXVkaXQKICAgICAgLSAqX2FwYl9raWVz\
ZXJ2ZXJfam1zX2F1ZGl0X3RyYW5zYWN0ZWQKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfam1zX3VzZXJuYW1lCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ptc19wYXNzd29yZAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9qbXNfYW1xX3F1ZXVlcwoKICAgICAgIyBSSCAtIFNTTwogICAgICAtICpfYXBiX3Nzb191cmwKICAgICAgLSAqX2FwYl9zc29fcmVhbG0KICAgICAgLSA8PDogKl9hcGJfc3NvX2NsaWVudAogICAgICAgIG5hbWU6IGFwYl9zc29fYnVzaW5lc3NjZW50cmFsX2NsaWVudAogICAgICAgIHRpdGxlOiBSSC1TU08gQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nIC0gQ2xpZW50CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xp\
ZW50IG5hbWUgZm9yIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZy4gSWYgdGhlIHNlY3JldCwgdXNlciBhbmQgcGFzc3dvcmQgYXJlIHByb3ZpZGVkIGl0IHdpbGwgYmUgY3JlYXRlZC4gRm9yIGV4YW1wbGUsIGJ1c2luZXNzY2VudHJhbAogICAgICAtIDw8OiAqX2FwYl9zc29fY2xpZW50X3NlY3JldAogICAgICAgIG5hbWU6IGFwYl9zc29fYnVzaW5lc3NjZW50cmFsX2NsaWVudF9zZWNyZXQKICAgICAgICB0aXRsZTogUkgtU1NPIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZyAtIENsaWVudCBTZWNyZXQKICAgICAgICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBDbGllbnQgc2VjcmV0IGZvciBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcuCiAg\
ICAgIC0gPDw6ICpfYXBiX3Nzb19jbGllbnQKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX3Nzb19jbGllbnQKICAgICAgICB0aXRsZTogUkgtU1NPIFByb2Nlc3MgU2VydmVyIC0gQ2xpZW50CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IG5hbWUgZm9yIFByb2Nlc3MgU2VydmVyLiBJZiB0aGUgc2VjcmV0LCB1c2VyIGFuZCBwYXNzd29yZCBhcmUgcHJvdmlkZWQgaXQgd2lsbCBiZSBjcmVhdGVkLiBGb3IgZXhhbXBsZSwga2llc2VydmVyCiAgICAgIC0gPDw6ICpfYXBiX3Nzb19jbGllbnRfc2VjcmV0CiAgICAgICAgbmFtZTogYXBiX2tpZXNlcnZlcl9zc29fY2xpZW50X3NlY3JldAogICAgICAgIHRpdGxlOiBSSC1TU08gUHJv\
Y2VzcyBTZXJ2ZXIgLSBDbGllbnQgU2VjcmV0CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IHNlY3JldCBmb3IgUHJvY2VzcyBTZXJ2ZXIuCiAgICAgIC0gKl9hcGJfc3NvX3VzZXIKICAgICAgLSAqX2FwYl9zc29fcHdkCiAgICAgIC0gKl9hcGJfc3NvX2Rpc2FibGVfc3NsX2NlcnRfdmFsaWRhdGlvbgogICAgICAtICpfYXBiX3Nzb19wcmluY2lwYWxfYXR0cmlidXRlCgogICAgICAjIExEQVAKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfdXJsCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2JpbmRfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmluZF9jcmVkZW50aWFsCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2phYXNfc2VjdXJp\
dHlfZG9tYWluCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Jhc2VfY3R4X2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Jhc2VfZmlsdGVyCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3NlYXJjaF9zY29wZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF9zZWFyY2hfdGltZV9saW1pdAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9kaXN0aW5ndWlzaGVkX25hbWVfYXR0cmlidXRlCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3BhcnNlX3VzZXJuYW1lCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3VzZXJuYW1lX2JlZ2luX3N0cmluZwogICAgICAtICpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9lbmRfc3RyaW5nCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lk\
CiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVzX2N0eF9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX2ZpbHRlcgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX3JlY3Vyc2lvbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9kZWZhdWx0X3JvbGUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9uYW1lX2F0dHJpYnV0ZV9pZAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9wYXJzZV9yb2xlX25hbWVfZnJvbV9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX2F0dHJpYnV0ZV9pc19kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yZWZlcnJhbF91c2VyX2F0dHJpYnV0ZV9pZF90b19jaGVjawoKICAgICAgIyBSb2xlTWFwcGluZwogICAgICAtICpfYXBi\
X2F1dGhfcm9sZV9tYXBwZXJfcm9sZXNfcHJvcGVydGllcwogICAgICAtICpfYXBiX2F1dGhfcm9sZV9tYXBwZXJfcmVwbGFjZV9yb2xlCg=="

modules:
  repositories:
    - path: modules
  install:
    - name: rhpam-apb
packages:
  content_sets_file: content_sets.yml
  repositories:
    - name: base
      id: rhel-7-server-rpms
  install:
    - java-1.8.0-openjdk-headless
osbs:
  configuration:
    container_file: container.yaml
  repository:
    name: apbs/rhpam-7-apb-openshift
    branch: rhpam-7-rhel-7
