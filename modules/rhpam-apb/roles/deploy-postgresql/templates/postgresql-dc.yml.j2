apiVersion: v1
kind: DeploymentConfig
metadata:
  name: '{{ deployment_name }}'
  namespace: '{{ namespace }}'
  labels:
    app: '{{ kieserver_deployment_name }}'
    application: '{{ application_name }}'
    service: '{{ service_name }}'
spec:
  strategy:
    type: Rolling
    rollingParams:
      maxSurge: 100%
      maxUnavailable: 0
  selector:
    deploymentConfig: '{{ deployment_name }}'
  triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          name: '{{ postgresql_image_name }}:{{ postgresql_image_tag }}'
          namespace: '{{ postgresql_image_namespace }}'
  replicas: 1
  template:
    metadata:
      labels:
        app: '{{ kieserver_deployment_name }}'
        application: '{{ application_name }}'
        service: '{{ service_name }}'
        deploymentConfig: '{{ deployment_name }}'
    spec:
      containers:
        - name: postgresql
          env:
            - name: POSTGRESQL_DATABASE
              value: '{{ postgresql_database }}'
            - name: POSTGRESQL_USER
              value: '{{ postgresql_user }}'
            - name: POSTGRESQL_PASSWORD
              value: '{{ postgresql_pwd }}'
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: "100"
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - "/usr/libexec/check-container"
              - "--live"
            initialDelaySeconds: 120
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
              - "/usr/libexec/check-container"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/pgsql/data
          workingDir: /
      volumes:
      - name: postgresql-data
{% if postgresql_volume_size == "" %}
        emptyDir: {}
{% else %}
        persistentVolumeClaim:
          claimName: '{{ deployment_name }}'
{% endif %}
